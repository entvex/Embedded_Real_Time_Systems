// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="eq,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=27,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=20,HLS_SYN_FF=2259,HLS_SYN_LUT=1271}" *)

module eq (
        ap_clk,
        ap_rst_n,
        s_axi_eqio_AWVALID,
        s_axi_eqio_AWREADY,
        s_axi_eqio_AWADDR,
        s_axi_eqio_WVALID,
        s_axi_eqio_WREADY,
        s_axi_eqio_WDATA,
        s_axi_eqio_WSTRB,
        s_axi_eqio_ARVALID,
        s_axi_eqio_ARREADY,
        s_axi_eqio_ARADDR,
        s_axi_eqio_RVALID,
        s_axi_eqio_RREADY,
        s_axi_eqio_RDATA,
        s_axi_eqio_RRESP,
        s_axi_eqio_BVALID,
        s_axi_eqio_BREADY,
        s_axi_eqio_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;
parameter    C_S_AXI_EQIO_DATA_WIDTH = 32;
parameter    C_S_AXI_EQIO_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_EQIO_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_eqio_AWVALID;
output   s_axi_eqio_AWREADY;
input  [C_S_AXI_EQIO_ADDR_WIDTH - 1:0] s_axi_eqio_AWADDR;
input   s_axi_eqio_WVALID;
output   s_axi_eqio_WREADY;
input  [C_S_AXI_EQIO_DATA_WIDTH - 1:0] s_axi_eqio_WDATA;
input  [C_S_AXI_EQIO_WSTRB_WIDTH - 1:0] s_axi_eqio_WSTRB;
input   s_axi_eqio_ARVALID;
output   s_axi_eqio_ARREADY;
input  [C_S_AXI_EQIO_ADDR_WIDTH - 1:0] s_axi_eqio_ARADDR;
output   s_axi_eqio_RVALID;
input   s_axi_eqio_RREADY;
output  [C_S_AXI_EQIO_DATA_WIDTH - 1:0] s_axi_eqio_RDATA;
output  [1:0] s_axi_eqio_RRESP;
output   s_axi_eqio_BVALID;
input   s_axi_eqio_BREADY;
output  [1:0] s_axi_eqio_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] b0;
wire   [31:0] b1;
wire   [31:0] b2;
wire   [31:0] a1;
wire   [31:0] a2;
wire   [15:0] band;
wire   [15:0] sampleIn;
reg    sampleOut_ap_vld;
reg   [5:0] coeff_address0;
reg    coeff_ce0;
reg    coeff_we0;
reg   [31:0] coeff_d0;
wire   [31:0] coeff_q0;
reg   [5:0] coeff_address1;
reg    coeff_ce1;
reg    coeff_we1;
reg   [31:0] coeff_d1;
wire   [31:0] coeff_q1;
reg   [2:0] x1_fix_address0;
reg    x1_fix_ce0;
reg    x1_fix_we0;
wire   [15:0] x1_fix_q0;
reg   [2:0] x2_fix_address0;
reg    x2_fix_ce0;
reg    x2_fix_we0;
wire   [15:0] x2_fix_q0;
reg    y1_fix_ce0;
reg    y1_fix_we0;
wire   [16:0] y1_fix_d0;
wire   [16:0] y1_fix_q0;
reg    y2_fix_ce0;
reg    y2_fix_we0;
wire   [16:0] y2_fix_q0;
reg  signed [31:0] reg_341;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
reg   [31:0] a2_read_reg_575;
reg   [31:0] a1_read_reg_580;
reg   [31:0] b2_read_reg_585;
reg   [31:0] b1_read_reg_590;
wire   [15:0] i_fu_358_p2;
reg   [15:0] i_reg_598;
wire   [0:0] tmp_s_fu_346_p2;
wire   [2:0] b_fu_375_p2;
reg   [2:0] b_reg_609;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_fu_369_p2;
reg   [2:0] x1_fix_addr_reg_629;
reg   [2:0] x2_fix_addr_reg_634;
reg   [2:0] y1_fix_addr_reg_639;
reg   [2:0] y2_fix_addr_reg_644;
reg  signed [31:0] coeff_load_1_reg_649;
wire    ap_CS_fsm_state4;
reg  signed [31:0] coeff_load_2_reg_654;
reg  signed [15:0] x1_fix_load_reg_674;
reg  signed [15:0] x2_fix_load_reg_679;
wire   [5:0] i_5_fu_452_p2;
reg   [5:0] i_5_reg_684;
reg  signed [31:0] coeff_load_4_reg_689;
wire   [31:0] grp_fu_446_p2;
reg   [31:0] tmp_i_reg_694;
reg  signed [16:0] y1_fix_load_reg_709;
reg  signed [16:0] y2_fix_load_reg_714;
wire   [31:0] grp_fu_461_p2;
reg   [31:0] tmp_2_i_reg_719;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_469_p2;
reg   [31:0] tmp_3_i_reg_724;
wire   [31:0] grp_fu_477_p2;
reg   [31:0] tmp_4_i_reg_739;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_486_p2;
reg   [31:0] tmp_5_i_reg_744;
wire   [31:0] tmp_7_i_fu_495_p2;
reg   [31:0] tmp_7_i_reg_749;
wire    ap_CS_fsm_state8;
reg   [15:0] tmp_6_reg_281;
reg   [5:0] i5_reg_293;
reg   [2:0] band_assign_reg_305;
reg   [15:0] sample_assign_reg_317;
reg   [15:0] tmp_12_reg_328;
wire    ap_CS_fsm_state10;
wire  signed [31:0] tmp_1_fu_364_p1;
wire   [31:0] tmp_7_fu_381_p1;
wire   [31:0] tmp_8_cast_fu_396_p1;
wire   [31:0] tmp_9_cast_fu_407_p1;
wire   [31:0] tmp_1_i_fu_412_p1;
wire   [31:0] tmp_10_cast_fu_426_p1;
wire   [31:0] tmp_11_cast_fu_437_p1;
wire  signed [31:0] tmp_2_fu_540_p1;
wire    ap_CS_fsm_state9;
wire  signed [31:0] tmp_3_fu_545_p1;
wire  signed [31:0] tmp_4_fu_560_p1;
wire  signed [31:0] tmp_5_fu_565_p1;
wire    ap_CS_fsm_state11;
wire   [15:0] tmp_13_fu_352_p2;
wire   [4:0] tmp_14_fu_386_p1;
wire   [4:0] tmp_8_fu_390_p2;
wire   [5:0] tmp_9_fu_401_p2;
wire   [5:0] tmp_10_fu_420_p2;
wire   [5:0] tmp_11_fu_431_p2;
wire   [31:0] tmp_fu_491_p2;
wire   [31:0] tmp_8_i_fu_500_p2;
wire   [31:0] out_fu_504_p2;
wire   [15:0] i_1_fu_530_p2;
wire   [15:0] i_2_fu_535_p2;
wire   [15:0] i_3_fu_550_p2;
wire   [15:0] i_4_fu_555_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

eq_coeff #(
    .DataWidth( 32 ),
    .AddressRange( 35 ),
    .AddressWidth( 6 ))
coeff_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(coeff_address0),
    .ce0(coeff_ce0),
    .we0(coeff_we0),
    .d0(coeff_d0),
    .q0(coeff_q0),
    .address1(coeff_address1),
    .ce1(coeff_ce1),
    .we1(coeff_we1),
    .d1(coeff_d1),
    .q1(coeff_q1)
);

eq_x1_fix #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
x1_fix_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x1_fix_address0),
    .ce0(x1_fix_ce0),
    .we0(x1_fix_we0),
    .d0(sample_assign_reg_317),
    .q0(x1_fix_q0)
);

eq_x1_fix #(
    .DataWidth( 16 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
x2_fix_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(x2_fix_address0),
    .ce0(x2_fix_ce0),
    .we0(x2_fix_we0),
    .d0(x1_fix_q0),
    .q0(x2_fix_q0)
);

eq_y1_fix #(
    .DataWidth( 17 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
y1_fix_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(y1_fix_addr_reg_639),
    .ce0(y1_fix_ce0),
    .we0(y1_fix_we0),
    .d0(y1_fix_d0),
    .q0(y1_fix_q0)
);

eq_y1_fix #(
    .DataWidth( 17 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
y2_fix_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(y2_fix_addr_reg_644),
    .ce0(y2_fix_ce0),
    .we0(y2_fix_we0),
    .d0(y1_fix_q0),
    .q0(y2_fix_q0)
);

eq_eqio_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_EQIO_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_EQIO_DATA_WIDTH ))
eq_eqio_s_axi_U(
    .AWVALID(s_axi_eqio_AWVALID),
    .AWREADY(s_axi_eqio_AWREADY),
    .AWADDR(s_axi_eqio_AWADDR),
    .WVALID(s_axi_eqio_WVALID),
    .WREADY(s_axi_eqio_WREADY),
    .WDATA(s_axi_eqio_WDATA),
    .WSTRB(s_axi_eqio_WSTRB),
    .ARVALID(s_axi_eqio_ARVALID),
    .ARREADY(s_axi_eqio_ARREADY),
    .ARADDR(s_axi_eqio_ARADDR),
    .RVALID(s_axi_eqio_RVALID),
    .RREADY(s_axi_eqio_RREADY),
    .RDATA(s_axi_eqio_RDATA),
    .RRESP(s_axi_eqio_RRESP),
    .BVALID(s_axi_eqio_BVALID),
    .BREADY(s_axi_eqio_BREADY),
    .BRESP(s_axi_eqio_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .b0(b0),
    .b1(b1),
    .b2(b2),
    .a1(a1),
    .a2(a2),
    .band(band),
    .sampleIn(sampleIn),
    .sampleOut(tmp_12_reg_328),
    .sampleOut_ap_vld(sampleOut_ap_vld)
);

eq_mul_16s_32s_32_2 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
eq_mul_16s_32s_32_2_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sample_assign_reg_317),
    .din1(reg_341),
    .ce(1'b1),
    .dout(grp_fu_446_p2)
);

eq_mul_16s_32s_32_2 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
eq_mul_16s_32s_32_2_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x1_fix_load_reg_674),
    .din1(coeff_load_1_reg_649),
    .ce(1'b1),
    .dout(grp_fu_461_p2)
);

eq_mul_16s_32s_32_2 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
eq_mul_16s_32s_32_2_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(x2_fix_load_reg_679),
    .din1(coeff_load_2_reg_654),
    .ce(1'b1),
    .dout(grp_fu_469_p2)
);

eq_mul_17s_32s_32_2 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
eq_mul_17s_32s_32_2_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(y1_fix_load_reg_709),
    .din1(reg_341),
    .ce(1'b1),
    .dout(grp_fu_477_p2)
);

eq_mul_17s_32s_32_2 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
eq_mul_17s_32s_32_2_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(y2_fix_load_reg_714),
    .din1(coeff_load_4_reg_689),
    .ce(1'b1),
    .dout(grp_fu_486_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (tmp_s_fu_346_p2 == 1'd0))) begin
        band_assign_reg_305 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        band_assign_reg_305 <= b_reg_609;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (tmp_s_fu_346_p2 == 1'd0))) begin
        i5_reg_293 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i5_reg_293 <= i_5_reg_684;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_341 <= coeff_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_341 <= coeff_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (tmp_s_fu_346_p2 == 1'd0))) begin
        sample_assign_reg_317 <= sampleIn;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        sample_assign_reg_317 <= {{out_fu_504_p2[30:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond_fu_369_p2))) begin
        tmp_12_reg_328 <= tmp_6_reg_281;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_12_reg_328 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (tmp_s_fu_346_p2 == 1'd0))) begin
        tmp_6_reg_281 <= 16'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_6_reg_281 <= {{out_fu_504_p2[30:15]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a1_read_reg_580 <= a1;
        a2_read_reg_575 <= a2;
        b1_read_reg_590 <= b1;
        b2_read_reg_585 <= b2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_reg_609 <= b_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        coeff_load_1_reg_649 <= coeff_q0;
        coeff_load_2_reg_654 <= coeff_q1;
        i_5_reg_684 <= i_5_fu_452_p2;
        x1_fix_load_reg_674 <= x1_fix_q0;
        x2_fix_load_reg_679 <= x2_fix_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        coeff_load_4_reg_689 <= coeff_q0;
        tmp_i_reg_694 <= grp_fu_446_p2;
        y1_fix_load_reg_709 <= y1_fix_q0;
        y2_fix_load_reg_714 <= y2_fix_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (tmp_s_fu_346_p2 == 1'd1))) begin
        i_reg_598 <= i_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_2_i_reg_719 <= grp_fu_461_p2;
        tmp_3_i_reg_724 <= grp_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_4_i_reg_739 <= grp_fu_477_p2;
        tmp_5_i_reg_744 <= grp_fu_486_p2;
        tmp_7_i_reg_749 <= tmp_7_i_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x1_fix_addr_reg_629 <= tmp_1_i_fu_412_p1;
        x2_fix_addr_reg_634 <= tmp_1_i_fu_412_p1;
        y1_fix_addr_reg_639 <= tmp_1_i_fu_412_p1;
        y2_fix_addr_reg_644 <= tmp_1_i_fu_412_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        coeff_address0 = tmp_5_fu_565_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        coeff_address0 = tmp_3_fu_545_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        coeff_address0 = tmp_11_cast_fu_437_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        coeff_address0 = tmp_8_cast_fu_396_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        coeff_address0 = tmp_7_fu_381_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        coeff_address0 = tmp_1_fu_364_p1;
    end else begin
        coeff_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        coeff_address1 = tmp_4_fu_560_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        coeff_address1 = tmp_2_fu_540_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        coeff_address1 = tmp_10_cast_fu_426_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        coeff_address1 = tmp_9_cast_fu_407_p1;
    end else begin
        coeff_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        coeff_ce0 = 1'b1;
    end else begin
        coeff_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        coeff_ce1 = 1'b1;
    end else begin
        coeff_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        coeff_d0 = a2_read_reg_575;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        coeff_d0 = b2_read_reg_585;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        coeff_d0 = b0;
    end else begin
        coeff_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        coeff_d1 = a1_read_reg_580;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        coeff_d1 = b1_read_reg_590;
    end else begin
        coeff_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (tmp_s_fu_346_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        coeff_we0 = 1'b1;
    end else begin
        coeff_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        coeff_we1 = 1'b1;
    end else begin
        coeff_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        sampleOut_ap_vld = 1'b1;
    end else begin
        sampleOut_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x1_fix_address0 = x1_fix_addr_reg_629;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x1_fix_address0 = tmp_1_i_fu_412_p1;
    end else begin
        x1_fix_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        x1_fix_ce0 = 1'b1;
    end else begin
        x1_fix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x1_fix_we0 = 1'b1;
    end else begin
        x1_fix_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x2_fix_address0 = x2_fix_addr_reg_634;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x2_fix_address0 = tmp_1_i_fu_412_p1;
    end else begin
        x2_fix_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        x2_fix_ce0 = 1'b1;
    end else begin
        x2_fix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x2_fix_we0 = 1'b1;
    end else begin
        x2_fix_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state8))) begin
        y1_fix_ce0 = 1'b1;
    end else begin
        y1_fix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        y1_fix_we0 = 1'b1;
    end else begin
        y1_fix_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        y2_fix_ce0 = 1'b1;
    end else begin
        y2_fix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        y2_fix_we0 = 1'b1;
    end else begin
        y2_fix_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (tmp_s_fu_346_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1) & (tmp_s_fu_346_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == exitcond_fu_369_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_fu_375_p2 = (band_assign_reg_305 + 3'd1);

assign exitcond_fu_369_p2 = ((band_assign_reg_305 == 3'd7) ? 1'b1 : 1'b0);

assign i_1_fu_530_p2 = (16'd1 + i_reg_598);

assign i_2_fu_535_p2 = (16'd2 + i_reg_598);

assign i_3_fu_550_p2 = (16'd3 + i_reg_598);

assign i_4_fu_555_p2 = (16'd4 + i_reg_598);

assign i_5_fu_452_p2 = (6'd5 + i5_reg_293);

assign i_fu_358_p2 = (band + tmp_13_fu_352_p2);

assign out_fu_504_p2 = (tmp_8_i_fu_500_p2 - tmp_5_i_reg_744);

assign tmp_10_cast_fu_426_p1 = tmp_10_fu_420_p2;

assign tmp_10_fu_420_p2 = (6'd3 + i5_reg_293);

assign tmp_11_cast_fu_437_p1 = tmp_11_fu_431_p2;

assign tmp_11_fu_431_p2 = (6'd4 + i5_reg_293);

assign tmp_13_fu_352_p2 = band << 16'd2;

assign tmp_14_fu_386_p1 = i5_reg_293[4:0];

assign tmp_1_fu_364_p1 = $signed(i_fu_358_p2);

assign tmp_1_i_fu_412_p1 = band_assign_reg_305;

assign tmp_2_fu_540_p1 = $signed(i_1_fu_530_p2);

assign tmp_3_fu_545_p1 = $signed(i_2_fu_535_p2);

assign tmp_4_fu_560_p1 = $signed(i_3_fu_550_p2);

assign tmp_5_fu_565_p1 = $signed(i_4_fu_555_p2);

assign tmp_7_fu_381_p1 = i5_reg_293;

assign tmp_7_i_fu_495_p2 = (tmp_2_i_reg_719 + tmp_fu_491_p2);

assign tmp_8_cast_fu_396_p1 = tmp_8_fu_390_p2;

assign tmp_8_fu_390_p2 = (5'd1 + tmp_14_fu_386_p1);

assign tmp_8_i_fu_500_p2 = (tmp_7_i_reg_749 - tmp_4_i_reg_739);

assign tmp_9_cast_fu_407_p1 = tmp_9_fu_401_p2;

assign tmp_9_fu_401_p2 = (6'd2 + i5_reg_293);

assign tmp_fu_491_p2 = (tmp_3_i_reg_724 + tmp_i_reg_694);

assign tmp_s_fu_346_p2 = (($signed(band) < $signed(16'd7)) ? 1'b1 : 1'b0);

assign y1_fix_d0 = {{out_fu_504_p2[31:15]}};

endmodule //eq
