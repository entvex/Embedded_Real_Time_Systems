// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "eq.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic eq::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic eq::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> eq::ap_ST_fsm_state1 = "1";
const sc_lv<11> eq::ap_ST_fsm_state2 = "10";
const sc_lv<11> eq::ap_ST_fsm_state3 = "100";
const sc_lv<11> eq::ap_ST_fsm_state4 = "1000";
const sc_lv<11> eq::ap_ST_fsm_state5 = "10000";
const sc_lv<11> eq::ap_ST_fsm_state6 = "100000";
const sc_lv<11> eq::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> eq::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> eq::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> eq::ap_ST_fsm_state10 = "1000000000";
const sc_lv<11> eq::ap_ST_fsm_state11 = "10000000000";
const sc_lv<32> eq::ap_const_lv32_0 = "00000000000000000000000000000000";
const int eq::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> eq::ap_const_lv32_2 = "10";
const sc_lv<32> eq::ap_const_lv32_4 = "100";
const sc_lv<1> eq::ap_const_lv1_1 = "1";
const sc_lv<32> eq::ap_const_lv32_1 = "1";
const sc_lv<1> eq::ap_const_lv1_0 = "0";
const sc_lv<32> eq::ap_const_lv32_3 = "11";
const sc_lv<32> eq::ap_const_lv32_5 = "101";
const sc_lv<32> eq::ap_const_lv32_6 = "110";
const sc_lv<32> eq::ap_const_lv32_7 = "111";
const sc_lv<16> eq::ap_const_lv16_0 = "0000000000000000";
const sc_lv<6> eq::ap_const_lv6_0 = "000000";
const sc_lv<3> eq::ap_const_lv3_0 = "000";
const sc_lv<32> eq::ap_const_lv32_9 = "1001";
const sc_lv<32> eq::ap_const_lv32_8 = "1000";
const sc_lv<32> eq::ap_const_lv32_A = "1010";
const sc_lv<16> eq::ap_const_lv16_7 = "111";
const sc_lv<16> eq::ap_const_lv16_2 = "10";
const sc_lv<3> eq::ap_const_lv3_7 = "111";
const sc_lv<3> eq::ap_const_lv3_1 = "1";
const sc_lv<5> eq::ap_const_lv5_1 = "1";
const sc_lv<6> eq::ap_const_lv6_2 = "10";
const sc_lv<6> eq::ap_const_lv6_3 = "11";
const sc_lv<6> eq::ap_const_lv6_4 = "100";
const sc_lv<6> eq::ap_const_lv6_5 = "101";
const sc_lv<32> eq::ap_const_lv32_F = "1111";
const sc_lv<32> eq::ap_const_lv32_1F = "11111";
const sc_lv<32> eq::ap_const_lv32_1E = "11110";
const sc_lv<16> eq::ap_const_lv16_1 = "1";
const sc_lv<16> eq::ap_const_lv16_3 = "11";
const sc_lv<16> eq::ap_const_lv16_4 = "100";
const bool eq::ap_const_boolean_1 = true;

eq::eq(sc_module_name name) : sc_module(name), mVcdFile(0) {
    coeff_U = new eq_coeff("coeff_U");
    coeff_U->clk(ap_clk);
    coeff_U->reset(ap_rst_n_inv);
    coeff_U->address0(coeff_address0);
    coeff_U->ce0(coeff_ce0);
    coeff_U->we0(coeff_we0);
    coeff_U->d0(coeff_d0);
    coeff_U->q0(coeff_q0);
    coeff_U->address1(coeff_address1);
    coeff_U->ce1(coeff_ce1);
    coeff_U->we1(coeff_we1);
    coeff_U->d1(coeff_d1);
    coeff_U->q1(coeff_q1);
    x1_fix_U = new eq_x1_fix("x1_fix_U");
    x1_fix_U->clk(ap_clk);
    x1_fix_U->reset(ap_rst_n_inv);
    x1_fix_U->address0(x1_fix_address0);
    x1_fix_U->ce0(x1_fix_ce0);
    x1_fix_U->we0(x1_fix_we0);
    x1_fix_U->d0(sample_assign_reg_317);
    x1_fix_U->q0(x1_fix_q0);
    x2_fix_U = new eq_x1_fix("x2_fix_U");
    x2_fix_U->clk(ap_clk);
    x2_fix_U->reset(ap_rst_n_inv);
    x2_fix_U->address0(x2_fix_address0);
    x2_fix_U->ce0(x2_fix_ce0);
    x2_fix_U->we0(x2_fix_we0);
    x2_fix_U->d0(x1_fix_q0);
    x2_fix_U->q0(x2_fix_q0);
    y1_fix_U = new eq_y1_fix("y1_fix_U");
    y1_fix_U->clk(ap_clk);
    y1_fix_U->reset(ap_rst_n_inv);
    y1_fix_U->address0(y1_fix_addr_reg_639);
    y1_fix_U->ce0(y1_fix_ce0);
    y1_fix_U->we0(y1_fix_we0);
    y1_fix_U->d0(y1_fix_d0);
    y1_fix_U->q0(y1_fix_q0);
    y2_fix_U = new eq_y1_fix("y2_fix_U");
    y2_fix_U->clk(ap_clk);
    y2_fix_U->reset(ap_rst_n_inv);
    y2_fix_U->address0(y2_fix_addr_reg_644);
    y2_fix_U->ce0(y2_fix_ce0);
    y2_fix_U->we0(y2_fix_we0);
    y2_fix_U->d0(y1_fix_q0);
    y2_fix_U->q0(y2_fix_q0);
    eq_eqio_s_axi_U = new eq_eqio_s_axi<C_S_AXI_EQIO_ADDR_WIDTH,C_S_AXI_EQIO_DATA_WIDTH>("eq_eqio_s_axi_U");
    eq_eqio_s_axi_U->AWVALID(s_axi_eqio_AWVALID);
    eq_eqio_s_axi_U->AWREADY(s_axi_eqio_AWREADY);
    eq_eqio_s_axi_U->AWADDR(s_axi_eqio_AWADDR);
    eq_eqio_s_axi_U->WVALID(s_axi_eqio_WVALID);
    eq_eqio_s_axi_U->WREADY(s_axi_eqio_WREADY);
    eq_eqio_s_axi_U->WDATA(s_axi_eqio_WDATA);
    eq_eqio_s_axi_U->WSTRB(s_axi_eqio_WSTRB);
    eq_eqio_s_axi_U->ARVALID(s_axi_eqio_ARVALID);
    eq_eqio_s_axi_U->ARREADY(s_axi_eqio_ARREADY);
    eq_eqio_s_axi_U->ARADDR(s_axi_eqio_ARADDR);
    eq_eqio_s_axi_U->RVALID(s_axi_eqio_RVALID);
    eq_eqio_s_axi_U->RREADY(s_axi_eqio_RREADY);
    eq_eqio_s_axi_U->RDATA(s_axi_eqio_RDATA);
    eq_eqio_s_axi_U->RRESP(s_axi_eqio_RRESP);
    eq_eqio_s_axi_U->BVALID(s_axi_eqio_BVALID);
    eq_eqio_s_axi_U->BREADY(s_axi_eqio_BREADY);
    eq_eqio_s_axi_U->BRESP(s_axi_eqio_BRESP);
    eq_eqio_s_axi_U->ACLK(ap_clk);
    eq_eqio_s_axi_U->ARESET(ap_rst_n_inv);
    eq_eqio_s_axi_U->ACLK_EN(ap_var_for_const0);
    eq_eqio_s_axi_U->ap_start(ap_start);
    eq_eqio_s_axi_U->interrupt(interrupt);
    eq_eqio_s_axi_U->ap_ready(ap_ready);
    eq_eqio_s_axi_U->ap_done(ap_done);
    eq_eqio_s_axi_U->ap_idle(ap_idle);
    eq_eqio_s_axi_U->b0(b0);
    eq_eqio_s_axi_U->b1(b1);
    eq_eqio_s_axi_U->b2(b2);
    eq_eqio_s_axi_U->a1(a1);
    eq_eqio_s_axi_U->a2(a2);
    eq_eqio_s_axi_U->band(band);
    eq_eqio_s_axi_U->sampleIn(sampleIn);
    eq_eqio_s_axi_U->sampleOut(tmp_12_reg_328);
    eq_eqio_s_axi_U->sampleOut_ap_vld(sampleOut_ap_vld);
    eq_mul_16s_32s_32_2_U0 = new eq_mul_16s_32s_32_2<1,2,16,32,32>("eq_mul_16s_32s_32_2_U0");
    eq_mul_16s_32s_32_2_U0->clk(ap_clk);
    eq_mul_16s_32s_32_2_U0->reset(ap_rst_n_inv);
    eq_mul_16s_32s_32_2_U0->din0(sample_assign_reg_317);
    eq_mul_16s_32s_32_2_U0->din1(reg_341);
    eq_mul_16s_32s_32_2_U0->ce(ap_var_for_const0);
    eq_mul_16s_32s_32_2_U0->dout(grp_fu_446_p2);
    eq_mul_16s_32s_32_2_U1 = new eq_mul_16s_32s_32_2<1,2,16,32,32>("eq_mul_16s_32s_32_2_U1");
    eq_mul_16s_32s_32_2_U1->clk(ap_clk);
    eq_mul_16s_32s_32_2_U1->reset(ap_rst_n_inv);
    eq_mul_16s_32s_32_2_U1->din0(x1_fix_load_reg_674);
    eq_mul_16s_32s_32_2_U1->din1(coeff_load_1_reg_649);
    eq_mul_16s_32s_32_2_U1->ce(ap_var_for_const0);
    eq_mul_16s_32s_32_2_U1->dout(grp_fu_461_p2);
    eq_mul_16s_32s_32_2_U2 = new eq_mul_16s_32s_32_2<1,2,16,32,32>("eq_mul_16s_32s_32_2_U2");
    eq_mul_16s_32s_32_2_U2->clk(ap_clk);
    eq_mul_16s_32s_32_2_U2->reset(ap_rst_n_inv);
    eq_mul_16s_32s_32_2_U2->din0(x2_fix_load_reg_679);
    eq_mul_16s_32s_32_2_U2->din1(coeff_load_2_reg_654);
    eq_mul_16s_32s_32_2_U2->ce(ap_var_for_const0);
    eq_mul_16s_32s_32_2_U2->dout(grp_fu_469_p2);
    eq_mul_17s_32s_32_2_U3 = new eq_mul_17s_32s_32_2<1,2,17,32,32>("eq_mul_17s_32s_32_2_U3");
    eq_mul_17s_32s_32_2_U3->clk(ap_clk);
    eq_mul_17s_32s_32_2_U3->reset(ap_rst_n_inv);
    eq_mul_17s_32s_32_2_U3->din0(y1_fix_load_reg_709);
    eq_mul_17s_32s_32_2_U3->din1(reg_341);
    eq_mul_17s_32s_32_2_U3->ce(ap_var_for_const0);
    eq_mul_17s_32s_32_2_U3->dout(grp_fu_477_p2);
    eq_mul_17s_32s_32_2_U4 = new eq_mul_17s_32s_32_2<1,2,17,32,32>("eq_mul_17s_32s_32_2_U4");
    eq_mul_17s_32s_32_2_U4->clk(ap_clk);
    eq_mul_17s_32s_32_2_U4->reset(ap_rst_n_inv);
    eq_mul_17s_32s_32_2_U4->din0(y2_fix_load_reg_714);
    eq_mul_17s_32s_32_2_U4->din1(coeff_load_4_reg_689);
    eq_mul_17s_32s_32_2_U4->ce(ap_var_for_const0);
    eq_mul_17s_32s_32_2_U4->dout(grp_fu_486_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_b_fu_375_p2);
    sensitive << ( band_assign_reg_305 );

    SC_METHOD(thread_coeff_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_1_fu_364_p1 );
    sensitive << ( tmp_7_fu_381_p1 );
    sensitive << ( tmp_8_cast_fu_396_p1 );
    sensitive << ( tmp_11_cast_fu_437_p1 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_3_fu_545_p1 );
    sensitive << ( tmp_5_fu_565_p1 );

    SC_METHOD(thread_coeff_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_9_cast_fu_407_p1 );
    sensitive << ( tmp_10_cast_fu_426_p1 );
    sensitive << ( tmp_2_fu_540_p1 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_4_fu_560_p1 );

    SC_METHOD(thread_coeff_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_coeff_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_coeff_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( b0 );
    sensitive << ( a2_read_reg_575 );
    sensitive << ( b2_read_reg_585 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_coeff_d1);
    sensitive << ( a1_read_reg_580 );
    sensitive << ( b1_read_reg_590 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_coeff_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_s_fu_346_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_coeff_we1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_exitcond_fu_369_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( band_assign_reg_305 );

    SC_METHOD(thread_i_1_fu_530_p2);
    sensitive << ( i_reg_598 );

    SC_METHOD(thread_i_2_fu_535_p2);
    sensitive << ( i_reg_598 );

    SC_METHOD(thread_i_3_fu_550_p2);
    sensitive << ( i_reg_598 );

    SC_METHOD(thread_i_4_fu_555_p2);
    sensitive << ( i_reg_598 );

    SC_METHOD(thread_i_5_fu_452_p2);
    sensitive << ( i5_reg_293 );

    SC_METHOD(thread_i_fu_358_p2);
    sensitive << ( band );
    sensitive << ( tmp_13_fu_352_p2 );

    SC_METHOD(thread_out_fu_504_p2);
    sensitive << ( tmp_5_i_reg_744 );
    sensitive << ( tmp_8_i_fu_500_p2 );

    SC_METHOD(thread_sampleOut_ap_vld);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_tmp_10_cast_fu_426_p1);
    sensitive << ( tmp_10_fu_420_p2 );

    SC_METHOD(thread_tmp_10_fu_420_p2);
    sensitive << ( i5_reg_293 );

    SC_METHOD(thread_tmp_11_cast_fu_437_p1);
    sensitive << ( tmp_11_fu_431_p2 );

    SC_METHOD(thread_tmp_11_fu_431_p2);
    sensitive << ( i5_reg_293 );

    SC_METHOD(thread_tmp_13_fu_352_p2);
    sensitive << ( band );

    SC_METHOD(thread_tmp_14_fu_386_p1);
    sensitive << ( i5_reg_293 );

    SC_METHOD(thread_tmp_1_fu_364_p1);
    sensitive << ( i_fu_358_p2 );

    SC_METHOD(thread_tmp_1_i_fu_412_p1);
    sensitive << ( band_assign_reg_305 );

    SC_METHOD(thread_tmp_2_fu_540_p1);
    sensitive << ( i_1_fu_530_p2 );

    SC_METHOD(thread_tmp_3_fu_545_p1);
    sensitive << ( i_2_fu_535_p2 );

    SC_METHOD(thread_tmp_4_fu_560_p1);
    sensitive << ( i_3_fu_550_p2 );

    SC_METHOD(thread_tmp_5_fu_565_p1);
    sensitive << ( i_4_fu_555_p2 );

    SC_METHOD(thread_tmp_7_fu_381_p1);
    sensitive << ( i5_reg_293 );

    SC_METHOD(thread_tmp_7_i_fu_495_p2);
    sensitive << ( tmp_2_i_reg_719 );
    sensitive << ( tmp_fu_491_p2 );

    SC_METHOD(thread_tmp_8_cast_fu_396_p1);
    sensitive << ( tmp_8_fu_390_p2 );

    SC_METHOD(thread_tmp_8_fu_390_p2);
    sensitive << ( tmp_14_fu_386_p1 );

    SC_METHOD(thread_tmp_8_i_fu_500_p2);
    sensitive << ( tmp_4_i_reg_739 );
    sensitive << ( tmp_7_i_reg_749 );

    SC_METHOD(thread_tmp_9_cast_fu_407_p1);
    sensitive << ( tmp_9_fu_401_p2 );

    SC_METHOD(thread_tmp_9_fu_401_p2);
    sensitive << ( i5_reg_293 );

    SC_METHOD(thread_tmp_fu_491_p2);
    sensitive << ( tmp_i_reg_694 );
    sensitive << ( tmp_3_i_reg_724 );

    SC_METHOD(thread_tmp_s_fu_346_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( band );

    SC_METHOD(thread_x1_fix_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( x1_fix_addr_reg_629 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_1_i_fu_412_p1 );

    SC_METHOD(thread_x1_fix_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_x1_fix_we0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_x2_fix_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( x2_fix_addr_reg_634 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_1_i_fu_412_p1 );

    SC_METHOD(thread_x2_fix_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_x2_fix_we0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_y1_fix_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_y1_fix_d0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( out_fu_504_p2 );

    SC_METHOD(thread_y1_fix_we0);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_y2_fix_ce0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_y2_fix_we0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_s_fu_346_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_369_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "eq_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_eqio_AWVALID, "(port)s_axi_eqio_AWVALID");
    sc_trace(mVcdFile, s_axi_eqio_AWREADY, "(port)s_axi_eqio_AWREADY");
    sc_trace(mVcdFile, s_axi_eqio_AWADDR, "(port)s_axi_eqio_AWADDR");
    sc_trace(mVcdFile, s_axi_eqio_WVALID, "(port)s_axi_eqio_WVALID");
    sc_trace(mVcdFile, s_axi_eqio_WREADY, "(port)s_axi_eqio_WREADY");
    sc_trace(mVcdFile, s_axi_eqio_WDATA, "(port)s_axi_eqio_WDATA");
    sc_trace(mVcdFile, s_axi_eqio_WSTRB, "(port)s_axi_eqio_WSTRB");
    sc_trace(mVcdFile, s_axi_eqio_ARVALID, "(port)s_axi_eqio_ARVALID");
    sc_trace(mVcdFile, s_axi_eqio_ARREADY, "(port)s_axi_eqio_ARREADY");
    sc_trace(mVcdFile, s_axi_eqio_ARADDR, "(port)s_axi_eqio_ARADDR");
    sc_trace(mVcdFile, s_axi_eqio_RVALID, "(port)s_axi_eqio_RVALID");
    sc_trace(mVcdFile, s_axi_eqio_RREADY, "(port)s_axi_eqio_RREADY");
    sc_trace(mVcdFile, s_axi_eqio_RDATA, "(port)s_axi_eqio_RDATA");
    sc_trace(mVcdFile, s_axi_eqio_RRESP, "(port)s_axi_eqio_RRESP");
    sc_trace(mVcdFile, s_axi_eqio_BVALID, "(port)s_axi_eqio_BVALID");
    sc_trace(mVcdFile, s_axi_eqio_BREADY, "(port)s_axi_eqio_BREADY");
    sc_trace(mVcdFile, s_axi_eqio_BRESP, "(port)s_axi_eqio_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, b0, "b0");
    sc_trace(mVcdFile, b1, "b1");
    sc_trace(mVcdFile, b2, "b2");
    sc_trace(mVcdFile, a1, "a1");
    sc_trace(mVcdFile, a2, "a2");
    sc_trace(mVcdFile, band, "band");
    sc_trace(mVcdFile, sampleIn, "sampleIn");
    sc_trace(mVcdFile, sampleOut_ap_vld, "sampleOut_ap_vld");
    sc_trace(mVcdFile, coeff_address0, "coeff_address0");
    sc_trace(mVcdFile, coeff_ce0, "coeff_ce0");
    sc_trace(mVcdFile, coeff_we0, "coeff_we0");
    sc_trace(mVcdFile, coeff_d0, "coeff_d0");
    sc_trace(mVcdFile, coeff_q0, "coeff_q0");
    sc_trace(mVcdFile, coeff_address1, "coeff_address1");
    sc_trace(mVcdFile, coeff_ce1, "coeff_ce1");
    sc_trace(mVcdFile, coeff_we1, "coeff_we1");
    sc_trace(mVcdFile, coeff_d1, "coeff_d1");
    sc_trace(mVcdFile, coeff_q1, "coeff_q1");
    sc_trace(mVcdFile, x1_fix_address0, "x1_fix_address0");
    sc_trace(mVcdFile, x1_fix_ce0, "x1_fix_ce0");
    sc_trace(mVcdFile, x1_fix_we0, "x1_fix_we0");
    sc_trace(mVcdFile, x1_fix_q0, "x1_fix_q0");
    sc_trace(mVcdFile, x2_fix_address0, "x2_fix_address0");
    sc_trace(mVcdFile, x2_fix_ce0, "x2_fix_ce0");
    sc_trace(mVcdFile, x2_fix_we0, "x2_fix_we0");
    sc_trace(mVcdFile, x2_fix_q0, "x2_fix_q0");
    sc_trace(mVcdFile, y1_fix_ce0, "y1_fix_ce0");
    sc_trace(mVcdFile, y1_fix_we0, "y1_fix_we0");
    sc_trace(mVcdFile, y1_fix_d0, "y1_fix_d0");
    sc_trace(mVcdFile, y1_fix_q0, "y1_fix_q0");
    sc_trace(mVcdFile, y2_fix_ce0, "y2_fix_ce0");
    sc_trace(mVcdFile, y2_fix_we0, "y2_fix_we0");
    sc_trace(mVcdFile, y2_fix_q0, "y2_fix_q0");
    sc_trace(mVcdFile, reg_341, "reg_341");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, a2_read_reg_575, "a2_read_reg_575");
    sc_trace(mVcdFile, a1_read_reg_580, "a1_read_reg_580");
    sc_trace(mVcdFile, b2_read_reg_585, "b2_read_reg_585");
    sc_trace(mVcdFile, b1_read_reg_590, "b1_read_reg_590");
    sc_trace(mVcdFile, i_fu_358_p2, "i_fu_358_p2");
    sc_trace(mVcdFile, i_reg_598, "i_reg_598");
    sc_trace(mVcdFile, tmp_s_fu_346_p2, "tmp_s_fu_346_p2");
    sc_trace(mVcdFile, b_fu_375_p2, "b_fu_375_p2");
    sc_trace(mVcdFile, b_reg_609, "b_reg_609");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_fu_369_p2, "exitcond_fu_369_p2");
    sc_trace(mVcdFile, x1_fix_addr_reg_629, "x1_fix_addr_reg_629");
    sc_trace(mVcdFile, x2_fix_addr_reg_634, "x2_fix_addr_reg_634");
    sc_trace(mVcdFile, y1_fix_addr_reg_639, "y1_fix_addr_reg_639");
    sc_trace(mVcdFile, y2_fix_addr_reg_644, "y2_fix_addr_reg_644");
    sc_trace(mVcdFile, coeff_load_1_reg_649, "coeff_load_1_reg_649");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, coeff_load_2_reg_654, "coeff_load_2_reg_654");
    sc_trace(mVcdFile, x1_fix_load_reg_674, "x1_fix_load_reg_674");
    sc_trace(mVcdFile, x2_fix_load_reg_679, "x2_fix_load_reg_679");
    sc_trace(mVcdFile, i_5_fu_452_p2, "i_5_fu_452_p2");
    sc_trace(mVcdFile, i_5_reg_684, "i_5_reg_684");
    sc_trace(mVcdFile, coeff_load_4_reg_689, "coeff_load_4_reg_689");
    sc_trace(mVcdFile, grp_fu_446_p2, "grp_fu_446_p2");
    sc_trace(mVcdFile, tmp_i_reg_694, "tmp_i_reg_694");
    sc_trace(mVcdFile, y1_fix_load_reg_709, "y1_fix_load_reg_709");
    sc_trace(mVcdFile, y2_fix_load_reg_714, "y2_fix_load_reg_714");
    sc_trace(mVcdFile, grp_fu_461_p2, "grp_fu_461_p2");
    sc_trace(mVcdFile, tmp_2_i_reg_719, "tmp_2_i_reg_719");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_469_p2, "grp_fu_469_p2");
    sc_trace(mVcdFile, tmp_3_i_reg_724, "tmp_3_i_reg_724");
    sc_trace(mVcdFile, grp_fu_477_p2, "grp_fu_477_p2");
    sc_trace(mVcdFile, tmp_4_i_reg_739, "tmp_4_i_reg_739");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, grp_fu_486_p2, "grp_fu_486_p2");
    sc_trace(mVcdFile, tmp_5_i_reg_744, "tmp_5_i_reg_744");
    sc_trace(mVcdFile, tmp_7_i_fu_495_p2, "tmp_7_i_fu_495_p2");
    sc_trace(mVcdFile, tmp_7_i_reg_749, "tmp_7_i_reg_749");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_6_reg_281, "tmp_6_reg_281");
    sc_trace(mVcdFile, i5_reg_293, "i5_reg_293");
    sc_trace(mVcdFile, band_assign_reg_305, "band_assign_reg_305");
    sc_trace(mVcdFile, sample_assign_reg_317, "sample_assign_reg_317");
    sc_trace(mVcdFile, tmp_12_reg_328, "tmp_12_reg_328");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_1_fu_364_p1, "tmp_1_fu_364_p1");
    sc_trace(mVcdFile, tmp_7_fu_381_p1, "tmp_7_fu_381_p1");
    sc_trace(mVcdFile, tmp_8_cast_fu_396_p1, "tmp_8_cast_fu_396_p1");
    sc_trace(mVcdFile, tmp_9_cast_fu_407_p1, "tmp_9_cast_fu_407_p1");
    sc_trace(mVcdFile, tmp_1_i_fu_412_p1, "tmp_1_i_fu_412_p1");
    sc_trace(mVcdFile, tmp_10_cast_fu_426_p1, "tmp_10_cast_fu_426_p1");
    sc_trace(mVcdFile, tmp_11_cast_fu_437_p1, "tmp_11_cast_fu_437_p1");
    sc_trace(mVcdFile, tmp_2_fu_540_p1, "tmp_2_fu_540_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_3_fu_545_p1, "tmp_3_fu_545_p1");
    sc_trace(mVcdFile, tmp_4_fu_560_p1, "tmp_4_fu_560_p1");
    sc_trace(mVcdFile, tmp_5_fu_565_p1, "tmp_5_fu_565_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, tmp_13_fu_352_p2, "tmp_13_fu_352_p2");
    sc_trace(mVcdFile, tmp_14_fu_386_p1, "tmp_14_fu_386_p1");
    sc_trace(mVcdFile, tmp_8_fu_390_p2, "tmp_8_fu_390_p2");
    sc_trace(mVcdFile, tmp_9_fu_401_p2, "tmp_9_fu_401_p2");
    sc_trace(mVcdFile, tmp_10_fu_420_p2, "tmp_10_fu_420_p2");
    sc_trace(mVcdFile, tmp_11_fu_431_p2, "tmp_11_fu_431_p2");
    sc_trace(mVcdFile, tmp_fu_491_p2, "tmp_fu_491_p2");
    sc_trace(mVcdFile, tmp_8_i_fu_500_p2, "tmp_8_i_fu_500_p2");
    sc_trace(mVcdFile, out_fu_504_p2, "out_fu_504_p2");
    sc_trace(mVcdFile, i_1_fu_530_p2, "i_1_fu_530_p2");
    sc_trace(mVcdFile, i_2_fu_535_p2, "i_2_fu_535_p2");
    sc_trace(mVcdFile, i_3_fu_550_p2, "i_3_fu_550_p2");
    sc_trace(mVcdFile, i_4_fu_555_p2, "i_4_fu_555_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("eq.hdltvin.dat");
    mHdltvoutHandle.open("eq.hdltvout.dat");
}

eq::~eq() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete coeff_U;
    delete x1_fix_U;
    delete x2_fix_U;
    delete y1_fix_U;
    delete y2_fix_U;
    delete eq_eqio_s_axi_U;
    delete eq_mul_16s_32s_32_2_U0;
    delete eq_mul_16s_32s_32_2_U1;
    delete eq_mul_16s_32s_32_2_U2;
    delete eq_mul_17s_32s_32_2_U3;
    delete eq_mul_17s_32s_32_2_U4;
}

void eq::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void eq::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(tmp_s_fu_346_p2.read(), ap_const_lv1_0))) {
        band_assign_reg_305 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        band_assign_reg_305 = b_reg_609.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(tmp_s_fu_346_p2.read(), ap_const_lv1_0))) {
        i5_reg_293 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        i5_reg_293 = i_5_reg_684.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        reg_341 = coeff_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        reg_341 = coeff_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(tmp_s_fu_346_p2.read(), ap_const_lv1_0))) {
        sample_assign_reg_317 = sampleIn.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        sample_assign_reg_317 = out_fu_504_p2.read().range(30, 15);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_369_p2.read()))) {
        tmp_12_reg_328 = tmp_6_reg_281.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        tmp_12_reg_328 = ap_const_lv16_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(tmp_s_fu_346_p2.read(), ap_const_lv1_0))) {
        tmp_6_reg_281 = ap_const_lv16_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_6_reg_281 = out_fu_504_p2.read().range(30, 15);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        a1_read_reg_580 = a1.read();
        a2_read_reg_575 = a2.read();
        b1_read_reg_590 = b1.read();
        b2_read_reg_585 = b2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        b_reg_609 = b_fu_375_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        coeff_load_1_reg_649 = coeff_q0.read();
        coeff_load_2_reg_654 = coeff_q1.read();
        i_5_reg_684 = i_5_fu_452_p2.read();
        x1_fix_load_reg_674 = x1_fix_q0.read();
        x2_fix_load_reg_679 = x2_fix_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        coeff_load_4_reg_689 = coeff_q0.read();
        tmp_i_reg_694 = grp_fu_446_p2.read();
        y1_fix_load_reg_709 = y1_fix_q0.read();
        y2_fix_load_reg_714 = y2_fix_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(tmp_s_fu_346_p2.read(), ap_const_lv1_1))) {
        i_reg_598 = i_fu_358_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_2_i_reg_719 = grp_fu_461_p2.read();
        tmp_3_i_reg_724 = grp_fu_469_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_4_i_reg_739 = grp_fu_477_p2.read();
        tmp_5_i_reg_744 = grp_fu_486_p2.read();
        tmp_7_i_reg_749 = tmp_7_i_fu_495_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x1_fix_addr_reg_629 =  (sc_lv<3>) (tmp_1_i_fu_412_p1.read());
        x2_fix_addr_reg_634 =  (sc_lv<3>) (tmp_1_i_fu_412_p1.read());
        y1_fix_addr_reg_639 =  (sc_lv<3>) (tmp_1_i_fu_412_p1.read());
        y2_fix_addr_reg_644 =  (sc_lv<3>) (tmp_1_i_fu_412_p1.read());
    }
}

void eq::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void eq::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void eq::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void eq::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void eq::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void eq::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void eq::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void eq::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void eq::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void eq::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void eq::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void eq::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void eq::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void eq::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void eq::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void eq::thread_b_fu_375_p2() {
    b_fu_375_p2 = (!band_assign_reg_305.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(band_assign_reg_305.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void eq::thread_coeff_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        coeff_address0 =  (sc_lv<6>) (tmp_5_fu_565_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        coeff_address0 =  (sc_lv<6>) (tmp_3_fu_545_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        coeff_address0 =  (sc_lv<6>) (tmp_11_cast_fu_437_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        coeff_address0 =  (sc_lv<6>) (tmp_8_cast_fu_396_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        coeff_address0 =  (sc_lv<6>) (tmp_7_fu_381_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        coeff_address0 =  (sc_lv<6>) (tmp_1_fu_364_p1.read());
    } else {
        coeff_address0 = "XXXXXX";
    }
}

void eq::thread_coeff_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        coeff_address1 =  (sc_lv<6>) (tmp_4_fu_560_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        coeff_address1 =  (sc_lv<6>) (tmp_2_fu_540_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        coeff_address1 =  (sc_lv<6>) (tmp_10_cast_fu_426_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        coeff_address1 =  (sc_lv<6>) (tmp_9_cast_fu_407_p1.read());
    } else {
        coeff_address1 = "XXXXXX";
    }
}

void eq::thread_coeff_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        coeff_ce0 = ap_const_logic_1;
    } else {
        coeff_ce0 = ap_const_logic_0;
    }
}

void eq::thread_coeff_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        coeff_ce1 = ap_const_logic_1;
    } else {
        coeff_ce1 = ap_const_logic_0;
    }
}

void eq::thread_coeff_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        coeff_d0 = a2_read_reg_575.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        coeff_d0 = b2_read_reg_585.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        coeff_d0 = b0.read();
    } else {
        coeff_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void eq::thread_coeff_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        coeff_d1 = a1_read_reg_580.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        coeff_d1 = b1_read_reg_590.read();
    } else {
        coeff_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void eq::thread_coeff_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(tmp_s_fu_346_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        coeff_we0 = ap_const_logic_1;
    } else {
        coeff_we0 = ap_const_logic_0;
    }
}

void eq::thread_coeff_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        coeff_we1 = ap_const_logic_1;
    } else {
        coeff_we1 = ap_const_logic_0;
    }
}

void eq::thread_exitcond_fu_369_p2() {
    exitcond_fu_369_p2 = (!band_assign_reg_305.read().is_01() || !ap_const_lv3_7.is_01())? sc_lv<1>(): sc_lv<1>(band_assign_reg_305.read() == ap_const_lv3_7);
}

void eq::thread_i_1_fu_530_p2() {
    i_1_fu_530_p2 = (!ap_const_lv16_1.is_01() || !i_reg_598.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_1) + sc_biguint<16>(i_reg_598.read()));
}

void eq::thread_i_2_fu_535_p2() {
    i_2_fu_535_p2 = (!ap_const_lv16_2.is_01() || !i_reg_598.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_2) + sc_biguint<16>(i_reg_598.read()));
}

void eq::thread_i_3_fu_550_p2() {
    i_3_fu_550_p2 = (!ap_const_lv16_3.is_01() || !i_reg_598.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_3) + sc_biguint<16>(i_reg_598.read()));
}

void eq::thread_i_4_fu_555_p2() {
    i_4_fu_555_p2 = (!ap_const_lv16_4.is_01() || !i_reg_598.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_4) + sc_biguint<16>(i_reg_598.read()));
}

void eq::thread_i_5_fu_452_p2() {
    i_5_fu_452_p2 = (!ap_const_lv6_5.is_01() || !i5_reg_293.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_5) + sc_biguint<6>(i5_reg_293.read()));
}

void eq::thread_i_fu_358_p2() {
    i_fu_358_p2 = (!band.read().is_01() || !tmp_13_fu_352_p2.read().is_01())? sc_lv<16>(): (sc_biguint<16>(band.read()) + sc_biguint<16>(tmp_13_fu_352_p2.read()));
}

void eq::thread_out_fu_504_p2() {
    out_fu_504_p2 = (!tmp_8_i_fu_500_p2.read().is_01() || !tmp_5_i_reg_744.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_8_i_fu_500_p2.read()) - sc_biguint<32>(tmp_5_i_reg_744.read()));
}

void eq::thread_sampleOut_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sampleOut_ap_vld = ap_const_logic_1;
    } else {
        sampleOut_ap_vld = ap_const_logic_0;
    }
}

void eq::thread_tmp_10_cast_fu_426_p1() {
    tmp_10_cast_fu_426_p1 = esl_zext<32,6>(tmp_10_fu_420_p2.read());
}

void eq::thread_tmp_10_fu_420_p2() {
    tmp_10_fu_420_p2 = (!ap_const_lv6_3.is_01() || !i5_reg_293.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_3) + sc_biguint<6>(i5_reg_293.read()));
}

void eq::thread_tmp_11_cast_fu_437_p1() {
    tmp_11_cast_fu_437_p1 = esl_zext<32,6>(tmp_11_fu_431_p2.read());
}

void eq::thread_tmp_11_fu_431_p2() {
    tmp_11_fu_431_p2 = (!ap_const_lv6_4.is_01() || !i5_reg_293.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_4) + sc_biguint<6>(i5_reg_293.read()));
}

void eq::thread_tmp_13_fu_352_p2() {
    tmp_13_fu_352_p2 = (!ap_const_lv16_2.is_01())? sc_lv<16>(): band.read() << (unsigned short)ap_const_lv16_2.to_uint();
}

void eq::thread_tmp_14_fu_386_p1() {
    tmp_14_fu_386_p1 = i5_reg_293.read().range(5-1, 0);
}

void eq::thread_tmp_1_fu_364_p1() {
    tmp_1_fu_364_p1 = esl_sext<32,16>(i_fu_358_p2.read());
}

void eq::thread_tmp_1_i_fu_412_p1() {
    tmp_1_i_fu_412_p1 = esl_zext<32,3>(band_assign_reg_305.read());
}

void eq::thread_tmp_2_fu_540_p1() {
    tmp_2_fu_540_p1 = esl_sext<32,16>(i_1_fu_530_p2.read());
}

void eq::thread_tmp_3_fu_545_p1() {
    tmp_3_fu_545_p1 = esl_sext<32,16>(i_2_fu_535_p2.read());
}

void eq::thread_tmp_4_fu_560_p1() {
    tmp_4_fu_560_p1 = esl_sext<32,16>(i_3_fu_550_p2.read());
}

void eq::thread_tmp_5_fu_565_p1() {
    tmp_5_fu_565_p1 = esl_sext<32,16>(i_4_fu_555_p2.read());
}

void eq::thread_tmp_7_fu_381_p1() {
    tmp_7_fu_381_p1 = esl_zext<32,6>(i5_reg_293.read());
}

void eq::thread_tmp_7_i_fu_495_p2() {
    tmp_7_i_fu_495_p2 = (!tmp_2_i_reg_719.read().is_01() || !tmp_fu_491_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_2_i_reg_719.read()) + sc_biguint<32>(tmp_fu_491_p2.read()));
}

void eq::thread_tmp_8_cast_fu_396_p1() {
    tmp_8_cast_fu_396_p1 = esl_zext<32,5>(tmp_8_fu_390_p2.read());
}

void eq::thread_tmp_8_fu_390_p2() {
    tmp_8_fu_390_p2 = (!ap_const_lv5_1.is_01() || !tmp_14_fu_386_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(ap_const_lv5_1) + sc_biguint<5>(tmp_14_fu_386_p1.read()));
}

void eq::thread_tmp_8_i_fu_500_p2() {
    tmp_8_i_fu_500_p2 = (!tmp_7_i_reg_749.read().is_01() || !tmp_4_i_reg_739.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_7_i_reg_749.read()) - sc_biguint<32>(tmp_4_i_reg_739.read()));
}

void eq::thread_tmp_9_cast_fu_407_p1() {
    tmp_9_cast_fu_407_p1 = esl_zext<32,6>(tmp_9_fu_401_p2.read());
}

void eq::thread_tmp_9_fu_401_p2() {
    tmp_9_fu_401_p2 = (!ap_const_lv6_2.is_01() || !i5_reg_293.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_2) + sc_biguint<6>(i5_reg_293.read()));
}

void eq::thread_tmp_fu_491_p2() {
    tmp_fu_491_p2 = (!tmp_3_i_reg_724.read().is_01() || !tmp_i_reg_694.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_3_i_reg_724.read()) + sc_biguint<32>(tmp_i_reg_694.read()));
}

void eq::thread_tmp_s_fu_346_p2() {
    tmp_s_fu_346_p2 = (!band.read().is_01() || !ap_const_lv16_7.is_01())? sc_lv<1>(): (sc_bigint<16>(band.read()) < sc_bigint<16>(ap_const_lv16_7));
}

void eq::thread_x1_fix_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x1_fix_address0 = x1_fix_addr_reg_629.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x1_fix_address0 =  (sc_lv<3>) (tmp_1_i_fu_412_p1.read());
    } else {
        x1_fix_address0 =  (sc_lv<3>) ("XXX");
    }
}

void eq::thread_x1_fix_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        x1_fix_ce0 = ap_const_logic_1;
    } else {
        x1_fix_ce0 = ap_const_logic_0;
    }
}

void eq::thread_x1_fix_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x1_fix_we0 = ap_const_logic_1;
    } else {
        x1_fix_we0 = ap_const_logic_0;
    }
}

void eq::thread_x2_fix_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x2_fix_address0 = x2_fix_addr_reg_634.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x2_fix_address0 =  (sc_lv<3>) (tmp_1_i_fu_412_p1.read());
    } else {
        x2_fix_address0 =  (sc_lv<3>) ("XXX");
    }
}

void eq::thread_x2_fix_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        x2_fix_ce0 = ap_const_logic_1;
    } else {
        x2_fix_ce0 = ap_const_logic_0;
    }
}

void eq::thread_x2_fix_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x2_fix_we0 = ap_const_logic_1;
    } else {
        x2_fix_we0 = ap_const_logic_0;
    }
}

void eq::thread_y1_fix_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        y1_fix_ce0 = ap_const_logic_1;
    } else {
        y1_fix_ce0 = ap_const_logic_0;
    }
}

void eq::thread_y1_fix_d0() {
    y1_fix_d0 = out_fu_504_p2.read().range(31, 15);
}

void eq::thread_y1_fix_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        y1_fix_we0 = ap_const_logic_1;
    } else {
        y1_fix_we0 = ap_const_logic_0;
    }
}

void eq::thread_y2_fix_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        y2_fix_ce0 = ap_const_logic_1;
    } else {
        y2_fix_ce0 = ap_const_logic_0;
    }
}

void eq::thread_y2_fix_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        y2_fix_we0 = ap_const_logic_1;
    } else {
        y2_fix_we0 = ap_const_logic_0;
    }
}

void eq::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(tmp_s_fu_346_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(tmp_s_fu_346_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_369_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<11>) ("XXXXXXXXXXX");
            break;
    }
}

void eq::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_eqio_AWVALID\" :  \"" << s_axi_eqio_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_eqio_AWREADY\" :  \"" << s_axi_eqio_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_eqio_AWADDR\" :  \"" << s_axi_eqio_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_eqio_WVALID\" :  \"" << s_axi_eqio_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_eqio_WREADY\" :  \"" << s_axi_eqio_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_eqio_WDATA\" :  \"" << s_axi_eqio_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_eqio_WSTRB\" :  \"" << s_axi_eqio_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_eqio_ARVALID\" :  \"" << s_axi_eqio_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_eqio_ARREADY\" :  \"" << s_axi_eqio_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_eqio_ARADDR\" :  \"" << s_axi_eqio_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_eqio_RVALID\" :  \"" << s_axi_eqio_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_eqio_RREADY\" :  \"" << s_axi_eqio_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_eqio_RDATA\" :  \"" << s_axi_eqio_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_eqio_RRESP\" :  \"" << s_axi_eqio_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_eqio_BVALID\" :  \"" << s_axi_eqio_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_eqio_BREADY\" :  \"" << s_axi_eqio_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_eqio_BRESP\" :  \"" << s_axi_eqio_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

