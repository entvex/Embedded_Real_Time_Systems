// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _eq_HH_
#define _eq_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "eq_mul_16s_32s_32_2.h"
#include "eq_mul_17s_32s_32_2.h"
#include "eq_coeff.h"
#include "eq_x1_fix.h"
#include "eq_y1_fix.h"
#include "eq_eqio_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_EQIO_ADDR_WIDTH = 7,
         unsigned int C_S_AXI_EQIO_DATA_WIDTH = 32>
struct eq : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_eqio_AWVALID;
    sc_out< sc_logic > s_axi_eqio_AWREADY;
    sc_in< sc_uint<C_S_AXI_EQIO_ADDR_WIDTH> > s_axi_eqio_AWADDR;
    sc_in< sc_logic > s_axi_eqio_WVALID;
    sc_out< sc_logic > s_axi_eqio_WREADY;
    sc_in< sc_uint<C_S_AXI_EQIO_DATA_WIDTH> > s_axi_eqio_WDATA;
    sc_in< sc_uint<C_S_AXI_EQIO_DATA_WIDTH/8> > s_axi_eqio_WSTRB;
    sc_in< sc_logic > s_axi_eqio_ARVALID;
    sc_out< sc_logic > s_axi_eqio_ARREADY;
    sc_in< sc_uint<C_S_AXI_EQIO_ADDR_WIDTH> > s_axi_eqio_ARADDR;
    sc_out< sc_logic > s_axi_eqio_RVALID;
    sc_in< sc_logic > s_axi_eqio_RREADY;
    sc_out< sc_uint<C_S_AXI_EQIO_DATA_WIDTH> > s_axi_eqio_RDATA;
    sc_out< sc_lv<2> > s_axi_eqio_RRESP;
    sc_out< sc_logic > s_axi_eqio_BVALID;
    sc_in< sc_logic > s_axi_eqio_BREADY;
    sc_out< sc_lv<2> > s_axi_eqio_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    eq(sc_module_name name);
    SC_HAS_PROCESS(eq);

    ~eq();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    eq_coeff* coeff_U;
    eq_x1_fix* x1_fix_U;
    eq_x1_fix* x2_fix_U;
    eq_y1_fix* y1_fix_U;
    eq_y1_fix* y2_fix_U;
    eq_eqio_s_axi<C_S_AXI_EQIO_ADDR_WIDTH,C_S_AXI_EQIO_DATA_WIDTH>* eq_eqio_s_axi_U;
    eq_mul_16s_32s_32_2<1,2,16,32,32>* eq_mul_16s_32s_32_2_U0;
    eq_mul_16s_32s_32_2<1,2,16,32,32>* eq_mul_16s_32s_32_2_U1;
    eq_mul_16s_32s_32_2<1,2,16,32,32>* eq_mul_16s_32s_32_2_U2;
    eq_mul_17s_32s_32_2<1,2,17,32,32>* eq_mul_17s_32s_32_2_U3;
    eq_mul_17s_32s_32_2<1,2,17,32,32>* eq_mul_17s_32s_32_2_U4;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<11> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > b0;
    sc_signal< sc_lv<32> > b1;
    sc_signal< sc_lv<32> > b2;
    sc_signal< sc_lv<32> > a1;
    sc_signal< sc_lv<32> > a2;
    sc_signal< sc_lv<16> > band;
    sc_signal< sc_lv<16> > sampleIn;
    sc_signal< sc_logic > sampleOut_ap_vld;
    sc_signal< sc_lv<6> > coeff_address0;
    sc_signal< sc_logic > coeff_ce0;
    sc_signal< sc_logic > coeff_we0;
    sc_signal< sc_lv<32> > coeff_d0;
    sc_signal< sc_lv<32> > coeff_q0;
    sc_signal< sc_lv<6> > coeff_address1;
    sc_signal< sc_logic > coeff_ce1;
    sc_signal< sc_logic > coeff_we1;
    sc_signal< sc_lv<32> > coeff_d1;
    sc_signal< sc_lv<32> > coeff_q1;
    sc_signal< sc_lv<3> > x1_fix_address0;
    sc_signal< sc_logic > x1_fix_ce0;
    sc_signal< sc_logic > x1_fix_we0;
    sc_signal< sc_lv<16> > x1_fix_q0;
    sc_signal< sc_lv<3> > x2_fix_address0;
    sc_signal< sc_logic > x2_fix_ce0;
    sc_signal< sc_logic > x2_fix_we0;
    sc_signal< sc_lv<16> > x2_fix_q0;
    sc_signal< sc_logic > y1_fix_ce0;
    sc_signal< sc_logic > y1_fix_we0;
    sc_signal< sc_lv<17> > y1_fix_d0;
    sc_signal< sc_lv<17> > y1_fix_q0;
    sc_signal< sc_logic > y2_fix_ce0;
    sc_signal< sc_logic > y2_fix_we0;
    sc_signal< sc_lv<17> > y2_fix_q0;
    sc_signal< sc_lv<32> > reg_341;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > a2_read_reg_575;
    sc_signal< sc_lv<32> > a1_read_reg_580;
    sc_signal< sc_lv<32> > b2_read_reg_585;
    sc_signal< sc_lv<32> > b1_read_reg_590;
    sc_signal< sc_lv<16> > i_fu_358_p2;
    sc_signal< sc_lv<16> > i_reg_598;
    sc_signal< sc_lv<1> > tmp_s_fu_346_p2;
    sc_signal< sc_lv<3> > b_fu_375_p2;
    sc_signal< sc_lv<3> > b_reg_609;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > exitcond_fu_369_p2;
    sc_signal< sc_lv<3> > x1_fix_addr_reg_629;
    sc_signal< sc_lv<3> > x2_fix_addr_reg_634;
    sc_signal< sc_lv<3> > y1_fix_addr_reg_639;
    sc_signal< sc_lv<3> > y2_fix_addr_reg_644;
    sc_signal< sc_lv<32> > coeff_load_1_reg_649;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > coeff_load_2_reg_654;
    sc_signal< sc_lv<16> > x1_fix_load_reg_674;
    sc_signal< sc_lv<16> > x2_fix_load_reg_679;
    sc_signal< sc_lv<6> > i_5_fu_452_p2;
    sc_signal< sc_lv<6> > i_5_reg_684;
    sc_signal< sc_lv<32> > coeff_load_4_reg_689;
    sc_signal< sc_lv<32> > grp_fu_446_p2;
    sc_signal< sc_lv<32> > tmp_i_reg_694;
    sc_signal< sc_lv<17> > y1_fix_load_reg_709;
    sc_signal< sc_lv<17> > y2_fix_load_reg_714;
    sc_signal< sc_lv<32> > grp_fu_461_p2;
    sc_signal< sc_lv<32> > tmp_2_i_reg_719;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > grp_fu_469_p2;
    sc_signal< sc_lv<32> > tmp_3_i_reg_724;
    sc_signal< sc_lv<32> > grp_fu_477_p2;
    sc_signal< sc_lv<32> > tmp_4_i_reg_739;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<32> > grp_fu_486_p2;
    sc_signal< sc_lv<32> > tmp_5_i_reg_744;
    sc_signal< sc_lv<32> > tmp_7_i_fu_495_p2;
    sc_signal< sc_lv<32> > tmp_7_i_reg_749;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<16> > tmp_6_reg_281;
    sc_signal< sc_lv<6> > i5_reg_293;
    sc_signal< sc_lv<3> > band_assign_reg_305;
    sc_signal< sc_lv<16> > sample_assign_reg_317;
    sc_signal< sc_lv<16> > tmp_12_reg_328;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<32> > tmp_1_fu_364_p1;
    sc_signal< sc_lv<32> > tmp_7_fu_381_p1;
    sc_signal< sc_lv<32> > tmp_8_cast_fu_396_p1;
    sc_signal< sc_lv<32> > tmp_9_cast_fu_407_p1;
    sc_signal< sc_lv<32> > tmp_1_i_fu_412_p1;
    sc_signal< sc_lv<32> > tmp_10_cast_fu_426_p1;
    sc_signal< sc_lv<32> > tmp_11_cast_fu_437_p1;
    sc_signal< sc_lv<32> > tmp_2_fu_540_p1;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<32> > tmp_3_fu_545_p1;
    sc_signal< sc_lv<32> > tmp_4_fu_560_p1;
    sc_signal< sc_lv<32> > tmp_5_fu_565_p1;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<16> > tmp_13_fu_352_p2;
    sc_signal< sc_lv<5> > tmp_14_fu_386_p1;
    sc_signal< sc_lv<5> > tmp_8_fu_390_p2;
    sc_signal< sc_lv<6> > tmp_9_fu_401_p2;
    sc_signal< sc_lv<6> > tmp_10_fu_420_p2;
    sc_signal< sc_lv<6> > tmp_11_fu_431_p2;
    sc_signal< sc_lv<32> > tmp_fu_491_p2;
    sc_signal< sc_lv<32> > tmp_8_i_fu_500_p2;
    sc_signal< sc_lv<32> > out_fu_504_p2;
    sc_signal< sc_lv<16> > i_1_fu_530_p2;
    sc_signal< sc_lv<16> > i_2_fu_535_p2;
    sc_signal< sc_lv<16> > i_3_fu_550_p2;
    sc_signal< sc_lv<16> > i_4_fu_555_p2;
    sc_signal< sc_lv<11> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<11> ap_ST_fsm_state1;
    static const sc_lv<11> ap_ST_fsm_state2;
    static const sc_lv<11> ap_ST_fsm_state3;
    static const sc_lv<11> ap_ST_fsm_state4;
    static const sc_lv<11> ap_ST_fsm_state5;
    static const sc_lv<11> ap_ST_fsm_state6;
    static const sc_lv<11> ap_ST_fsm_state7;
    static const sc_lv<11> ap_ST_fsm_state8;
    static const sc_lv<11> ap_ST_fsm_state9;
    static const sc_lv<11> ap_ST_fsm_state10;
    static const sc_lv<11> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<16> ap_const_lv16_7;
    static const sc_lv<16> ap_const_lv16_2;
    static const sc_lv<3> ap_const_lv3_7;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<6> ap_const_lv6_2;
    static const sc_lv<6> ap_const_lv6_3;
    static const sc_lv<6> ap_const_lv6_4;
    static const sc_lv<6> ap_const_lv6_5;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<16> ap_const_lv16_3;
    static const sc_lv<16> ap_const_lv16_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_b_fu_375_p2();
    void thread_coeff_address0();
    void thread_coeff_address1();
    void thread_coeff_ce0();
    void thread_coeff_ce1();
    void thread_coeff_d0();
    void thread_coeff_d1();
    void thread_coeff_we0();
    void thread_coeff_we1();
    void thread_exitcond_fu_369_p2();
    void thread_i_1_fu_530_p2();
    void thread_i_2_fu_535_p2();
    void thread_i_3_fu_550_p2();
    void thread_i_4_fu_555_p2();
    void thread_i_5_fu_452_p2();
    void thread_i_fu_358_p2();
    void thread_out_fu_504_p2();
    void thread_sampleOut_ap_vld();
    void thread_tmp_10_cast_fu_426_p1();
    void thread_tmp_10_fu_420_p2();
    void thread_tmp_11_cast_fu_437_p1();
    void thread_tmp_11_fu_431_p2();
    void thread_tmp_13_fu_352_p2();
    void thread_tmp_14_fu_386_p1();
    void thread_tmp_1_fu_364_p1();
    void thread_tmp_1_i_fu_412_p1();
    void thread_tmp_2_fu_540_p1();
    void thread_tmp_3_fu_545_p1();
    void thread_tmp_4_fu_560_p1();
    void thread_tmp_5_fu_565_p1();
    void thread_tmp_7_fu_381_p1();
    void thread_tmp_7_i_fu_495_p2();
    void thread_tmp_8_cast_fu_396_p1();
    void thread_tmp_8_fu_390_p2();
    void thread_tmp_8_i_fu_500_p2();
    void thread_tmp_9_cast_fu_407_p1();
    void thread_tmp_9_fu_401_p2();
    void thread_tmp_fu_491_p2();
    void thread_tmp_s_fu_346_p2();
    void thread_x1_fix_address0();
    void thread_x1_fix_ce0();
    void thread_x1_fix_we0();
    void thread_x2_fix_address0();
    void thread_x2_fix_ce0();
    void thread_x2_fix_we0();
    void thread_y1_fix_ce0();
    void thread_y1_fix_d0();
    void thread_y1_fix_we0();
    void thread_y2_fix_ce0();
    void thread_y2_fix_we0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
