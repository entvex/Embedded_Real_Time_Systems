// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "b0"
#define AUTOTB_TVIN_b0  "../tv/cdatafile/c.eq.autotvin_b0.dat"
// wrapc file define: "b1"
#define AUTOTB_TVIN_b1  "../tv/cdatafile/c.eq.autotvin_b1.dat"
// wrapc file define: "b2"
#define AUTOTB_TVIN_b2  "../tv/cdatafile/c.eq.autotvin_b2.dat"
// wrapc file define: "a1"
#define AUTOTB_TVIN_a1  "../tv/cdatafile/c.eq.autotvin_a1.dat"
// wrapc file define: "a2"
#define AUTOTB_TVIN_a2  "../tv/cdatafile/c.eq.autotvin_a2.dat"
// wrapc file define: "band"
#define AUTOTB_TVIN_band  "../tv/cdatafile/c.eq.autotvin_band.dat"
// wrapc file define: "sampleIn"
#define AUTOTB_TVIN_sampleIn  "../tv/cdatafile/c.eq.autotvin_sampleIn.dat"
// wrapc file define: "sampleOut"
#define AUTOTB_TVOUT_sampleOut  "../tv/cdatafile/c.eq.autotvout_sampleOut.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "sampleOut"
#define AUTOTB_TVOUT_PC_sampleOut  "../tv/rtldatafile/rtl.eq.autotvout_sampleOut.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			b0_depth = 0;
			b1_depth = 0;
			b2_depth = 0;
			a1_depth = 0;
			a2_depth = 0;
			band_depth = 0;
			sampleIn_depth = 0;
			sampleOut_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{b0 " << b0_depth << "}\n";
			total_list << "{b1 " << b1_depth << "}\n";
			total_list << "{b2 " << b2_depth << "}\n";
			total_list << "{a1 " << a1_depth << "}\n";
			total_list << "{a2 " << a2_depth << "}\n";
			total_list << "{band " << band_depth << "}\n";
			total_list << "{sampleIn " << sampleIn_depth << "}\n";
			total_list << "{sampleOut " << sampleOut_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int b0_depth;
		int b1_depth;
		int b2_depth;
		int a1_depth;
		int a2_depth;
		int band_depth;
		int sampleIn_depth;
		int sampleOut_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern "C" void eq (
int b0,
int b1,
int b2,
int a1,
int a2,
short band,
short sampleIn,
short* sampleOut);

extern "C" void AESL_WRAP_eq (
int b0,
int b1,
int b2,
int a1,
int a2,
short band,
short sampleIn,
short* sampleOut)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "sampleOut"
		aesl_fh.read(AUTOTB_TVOUT_PC_sampleOut, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_sampleOut, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_sampleOut, AESL_token); // data

			sc_bv<16> *sampleOut_pc_buffer = new sc_bv<16>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sampleOut', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'sampleOut', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					sampleOut_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_sampleOut, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_sampleOut))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: sampleOut
				{
					// bitslice(15, 0)
					// {
						// celement: sampleOut(15, 0)
						// {
							sc_lv<16>* sampleOut_lv0_0_0_1 = new sc_lv<16>[1];
						// }
					// }

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: sampleOut(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(sampleOut[0]) != NULL) // check the null address if the c port is array or others
								{
									sampleOut_lv0_0_0_1[hls_map_index].range(15, 0) = sc_bv<16>(sampleOut_pc_buffer[hls_map_index].range(15, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(15, 0)
					{
						int hls_map_index = 0;
						// celement: sampleOut(15, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : sampleOut[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : sampleOut[0]
								// output_left_conversion : sampleOut[i_0]
								// output_type_conversion : (sampleOut_lv0_0_0_1[hls_map_index]).to_uint64()
								if (&(sampleOut[0]) != NULL) // check the null address if the c port is array or others
								{
									sampleOut[i_0] = (sampleOut_lv0_0_0_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] sampleOut_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "b0"
		char* tvin_b0 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_b0);

		// "b1"
		char* tvin_b1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_b1);

		// "b2"
		char* tvin_b2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_b2);

		// "a1"
		char* tvin_a1 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_a1);

		// "a2"
		char* tvin_a2 = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_a2);

		// "band"
		char* tvin_band = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_band);

		// "sampleIn"
		char* tvin_sampleIn = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_sampleIn);

		// "sampleOut"
		char* tvout_sampleOut = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_sampleOut);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_b0, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_b0, tvin_b0);

		sc_bv<32> b0_tvin_wrapc_buffer;

		// RTL Name: b0
		{
			// bitslice(31, 0)
			{
				// celement: b0(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : b0
						// sub_1st_elem          : 
						// ori_name_1st_elem     : b0
						// regulate_c_name       : b0
						// input_type_conversion : b0
						if (&(b0) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> b0_tmp_mem;
							b0_tmp_mem = b0;
							b0_tvin_wrapc_buffer.range(31, 0) = b0_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_b0, "%s\n", (b0_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_b0, tvin_b0);
		}

		tcl_file.set_num(1, &tcl_file.b0_depth);
		sprintf(tvin_b0, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_b0, tvin_b0);

		// [[transaction]]
		sprintf(tvin_b1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_b1, tvin_b1);

		sc_bv<32> b1_tvin_wrapc_buffer;

		// RTL Name: b1
		{
			// bitslice(31, 0)
			{
				// celement: b1(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : b1
						// sub_1st_elem          : 
						// ori_name_1st_elem     : b1
						// regulate_c_name       : b1
						// input_type_conversion : b1
						if (&(b1) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> b1_tmp_mem;
							b1_tmp_mem = b1;
							b1_tvin_wrapc_buffer.range(31, 0) = b1_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_b1, "%s\n", (b1_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_b1, tvin_b1);
		}

		tcl_file.set_num(1, &tcl_file.b1_depth);
		sprintf(tvin_b1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_b1, tvin_b1);

		// [[transaction]]
		sprintf(tvin_b2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_b2, tvin_b2);

		sc_bv<32> b2_tvin_wrapc_buffer;

		// RTL Name: b2
		{
			// bitslice(31, 0)
			{
				// celement: b2(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : b2
						// sub_1st_elem          : 
						// ori_name_1st_elem     : b2
						// regulate_c_name       : b2
						// input_type_conversion : b2
						if (&(b2) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> b2_tmp_mem;
							b2_tmp_mem = b2;
							b2_tvin_wrapc_buffer.range(31, 0) = b2_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_b2, "%s\n", (b2_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_b2, tvin_b2);
		}

		tcl_file.set_num(1, &tcl_file.b2_depth);
		sprintf(tvin_b2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_b2, tvin_b2);

		// [[transaction]]
		sprintf(tvin_a1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_a1, tvin_a1);

		sc_bv<32> a1_tvin_wrapc_buffer;

		// RTL Name: a1
		{
			// bitslice(31, 0)
			{
				// celement: a1(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : a1
						// sub_1st_elem          : 
						// ori_name_1st_elem     : a1
						// regulate_c_name       : a1
						// input_type_conversion : a1
						if (&(a1) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> a1_tmp_mem;
							a1_tmp_mem = a1;
							a1_tvin_wrapc_buffer.range(31, 0) = a1_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_a1, "%s\n", (a1_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_a1, tvin_a1);
		}

		tcl_file.set_num(1, &tcl_file.a1_depth);
		sprintf(tvin_a1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_a1, tvin_a1);

		// [[transaction]]
		sprintf(tvin_a2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_a2, tvin_a2);

		sc_bv<32> a2_tvin_wrapc_buffer;

		// RTL Name: a2
		{
			// bitslice(31, 0)
			{
				// celement: a2(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : a2
						// sub_1st_elem          : 
						// ori_name_1st_elem     : a2
						// regulate_c_name       : a2
						// input_type_conversion : a2
						if (&(a2) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> a2_tmp_mem;
							a2_tmp_mem = a2;
							a2_tvin_wrapc_buffer.range(31, 0) = a2_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_a2, "%s\n", (a2_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_a2, tvin_a2);
		}

		tcl_file.set_num(1, &tcl_file.a2_depth);
		sprintf(tvin_a2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_a2, tvin_a2);

		// [[transaction]]
		sprintf(tvin_band, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_band, tvin_band);

		sc_bv<16> band_tvin_wrapc_buffer;

		// RTL Name: band
		{
			// bitslice(15, 0)
			{
				// celement: band(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : band
						// sub_1st_elem          : 
						// ori_name_1st_elem     : band
						// regulate_c_name       : band
						// input_type_conversion : band
						if (&(band) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> band_tmp_mem;
							band_tmp_mem = band;
							band_tvin_wrapc_buffer.range(15, 0) = band_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_band, "%s\n", (band_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_band, tvin_band);
		}

		tcl_file.set_num(1, &tcl_file.band_depth);
		sprintf(tvin_band, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_band, tvin_band);

		// [[transaction]]
		sprintf(tvin_sampleIn, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_sampleIn, tvin_sampleIn);

		sc_bv<16> sampleIn_tvin_wrapc_buffer;

		// RTL Name: sampleIn
		{
			// bitslice(15, 0)
			{
				// celement: sampleIn(15, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : sampleIn
						// sub_1st_elem          : 
						// ori_name_1st_elem     : sampleIn
						// regulate_c_name       : sampleIn
						// input_type_conversion : sampleIn
						if (&(sampleIn) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> sampleIn_tmp_mem;
							sampleIn_tmp_mem = sampleIn;
							sampleIn_tvin_wrapc_buffer.range(15, 0) = sampleIn_tmp_mem.range(15, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_sampleIn, "%s\n", (sampleIn_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_sampleIn, tvin_sampleIn);
		}

		tcl_file.set_num(1, &tcl_file.sampleIn_depth);
		sprintf(tvin_sampleIn, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_sampleIn, tvin_sampleIn);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		eq(b0, b1, b2, a1, a2, band, sampleIn, sampleOut);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_sampleOut, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_sampleOut, tvout_sampleOut);

		sc_bv<16>* sampleOut_tvout_wrapc_buffer = new sc_bv<16>[1];

		// RTL Name: sampleOut
		{
			// bitslice(15, 0)
			{
				int hls_map_index = 0;
				// celement: sampleOut(15, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : sampleOut[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : sampleOut[0]
						// regulate_c_name       : sampleOut
						// input_type_conversion : sampleOut[i_0]
						if (&(sampleOut[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<16> sampleOut_tmp_mem;
							sampleOut_tmp_mem = sampleOut[i_0];
							sampleOut_tvout_wrapc_buffer[hls_map_index].range(15, 0) = sampleOut_tmp_mem.range(15, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_sampleOut, "%s\n", (sampleOut_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_sampleOut, tvout_sampleOut);
		}

		tcl_file.set_num(1, &tcl_file.sampleOut_depth);
		sprintf(tvout_sampleOut, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_sampleOut, tvout_sampleOut);

		// release memory allocation
		delete [] sampleOut_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "b0"
		delete [] tvin_b0;
		// release memory allocation: "b1"
		delete [] tvin_b1;
		// release memory allocation: "b2"
		delete [] tvin_b2;
		// release memory allocation: "a1"
		delete [] tvin_a1;
		// release memory allocation: "a2"
		delete [] tvin_a2;
		// release memory allocation: "band"
		delete [] tvin_band;
		// release memory allocation: "sampleIn"
		delete [] tvin_sampleIn;
		// release memory allocation: "sampleOut"
		delete [] tvout_sampleOut;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

