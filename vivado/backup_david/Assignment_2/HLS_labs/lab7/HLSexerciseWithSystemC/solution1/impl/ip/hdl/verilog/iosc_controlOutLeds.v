// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module iosc_controlOutLeds (
        ap_clk,
        ap_rst,
        ctrl,
        inSwitch,
        outLeds,
        outLeds_ap_vld,
        internalPulse
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input  [3:0] ctrl;
input  [3:0] inSwitch;
output  [3:0] outLeds;
output   outLeds_ap_vld;
input   internalPulse;

reg[3:0] outLeds;
reg outLeds_ap_vld;

reg   [31:0] v_assign_fu_106;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [31:0] internalLEDValue_fu_157_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] val_V_read_fu_110_p2;
wire   [0:0] tmp_fu_148_p2;
wire   [0:0] tmp_1_read_fu_129_p2;
wire   [3:0] v_V_fu_141_p2;
wire   [3:0] v_V_1_fu_163_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_condition_92;
reg    ap_condition_40;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (val_V_read_fu_110_p2 == 4'd0) & (tmp_fu_148_p2 == 1'd0) & (tmp_1_read_fu_129_p2 == 1'd1))) begin
        v_assign_fu_106 <= internalLEDValue_fu_157_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state3) & (val_V_read_fu_110_p2 == 4'd0) & (tmp_fu_148_p2 == 1'd1)))) begin
        v_assign_fu_106 <= 32'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if (((val_V_read_fu_110_p2 == 4'd0) & (tmp_fu_148_p2 == 1'd1))) begin
            outLeds = 4'd0;
        end else if ((ap_condition_40 == 1'b1)) begin
            outLeds = v_V_1_fu_163_p1;
        end else if ((ap_condition_92 == 1'b1)) begin
            outLeds = v_V_fu_141_p2;
        end else begin
            outLeds = 'bx;
        end
    end else begin
        outLeds = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (val_V_read_fu_110_p2 == 4'd0) & (tmp_fu_148_p2 == 1'd0) & (tmp_1_read_fu_129_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & (val_V_read_fu_110_p2 == 4'd0) & (tmp_fu_148_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state3) & ((val_V_read_fu_110_p2 == 4'd1) | (val_V_read_fu_110_p2 == 4'd2) | (val_V_read_fu_110_p2 == 4'd3) | (val_V_read_fu_110_p2 == 4'd4) | (val_V_read_fu_110_p2 == 4'd5) | (val_V_read_fu_110_p2 == 4'd6) | (val_V_read_fu_110_p2 == 4'd7) | (val_V_read_fu_110_p2 == 4'd8) | (val_V_read_fu_110_p2 == 4'd9) | (val_V_read_fu_110_p2 == 4'd10) | (val_V_read_fu_110_p2 == 4'd11) | (val_V_read_fu_110_p2 == 4'd12) | (val_V_read_fu_110_p2 == 4'd13) | (val_V_read_fu_110_p2 == 4'd14) | (val_V_read_fu_110_p2 == 4'd15))))) begin
        outLeds_ap_vld = 1'b1;
    end else begin
        outLeds_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_condition_40 = ((val_V_read_fu_110_p2 == 4'd0) & (tmp_fu_148_p2 == 1'd0) & (tmp_1_read_fu_129_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_92 = ((val_V_read_fu_110_p2 == 4'd1) | (val_V_read_fu_110_p2 == 4'd2) | (val_V_read_fu_110_p2 == 4'd3) | (val_V_read_fu_110_p2 == 4'd4) | (val_V_read_fu_110_p2 == 4'd5) | (val_V_read_fu_110_p2 == 4'd6) | (val_V_read_fu_110_p2 == 4'd7) | (val_V_read_fu_110_p2 == 4'd8) | (val_V_read_fu_110_p2 == 4'd9) | (val_V_read_fu_110_p2 == 4'd10) | (val_V_read_fu_110_p2 == 4'd11) | (val_V_read_fu_110_p2 == 4'd12) | (val_V_read_fu_110_p2 == 4'd13) | (val_V_read_fu_110_p2 == 4'd14) | (val_V_read_fu_110_p2 == 4'd15));
end

assign internalLEDValue_fu_157_p2 = (32'd1 + v_assign_fu_106);

assign tmp_1_read_fu_129_p2 = internalPulse;

assign tmp_fu_148_p2 = ((inSwitch == 4'd8) ? 1'b1 : 1'b0);

assign v_V_1_fu_163_p1 = v_assign_fu_106[3:0];

assign v_V_fu_141_p2 = (inSwitch & ctrl);

assign val_V_read_fu_110_p2 = ctrl;

endmodule //iosc_controlOutLeds
