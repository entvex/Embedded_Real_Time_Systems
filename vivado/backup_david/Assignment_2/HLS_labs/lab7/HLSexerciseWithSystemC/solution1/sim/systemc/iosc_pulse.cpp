// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "iosc_pulse.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic iosc_pulse::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic iosc_pulse::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> iosc_pulse::ap_ST_fsm_state1 = "1";
const sc_lv<3> iosc_pulse::ap_ST_fsm_state2 = "10";
const sc_lv<3> iosc_pulse::ap_ST_fsm_state3 = "100";
const sc_lv<10> iosc_pulse::ap_const_lv10_0 = "0000000000";
const sc_lv<32> iosc_pulse::ap_const_lv32_1 = "1";
const sc_lv<32> iosc_pulse::ap_const_lv32_2 = "10";
const sc_lv<1> iosc_pulse::ap_const_lv1_0 = "0";
const sc_lv<1> iosc_pulse::ap_const_lv1_1 = "1";
const sc_lv<10> iosc_pulse::ap_const_lv10_3E8 = "1111101000";
const sc_lv<10> iosc_pulse::ap_const_lv10_1 = "1";
const bool iosc_pulse::ap_const_boolean_1 = true;

iosc_pulse::iosc_pulse(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_clockCounter_V_fu_107_p2);
    sensitive << ( clockCounter_V_1_fu_80 );

    SC_METHOD(thread_internalPulse);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_101_p2 );

    SC_METHOD(thread_internalPulse_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_fu_101_p2 );

    SC_METHOD(thread_tmp_fu_101_p2);
    sensitive << ( clockCounter_V_1_fu_80 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "iosc_pulse_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, internalPulse, "(port)internalPulse");
    sc_trace(mVcdFile, internalPulse_ap_vld, "(port)internalPulse_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, clockCounter_V_1_fu_80, "clockCounter_V_1_fu_80");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, clockCounter_V_fu_107_p2, "clockCounter_V_fu_107_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_fu_101_p2, "tmp_fu_101_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

iosc_pulse::~iosc_pulse() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void iosc_pulse::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_fu_101_p2.read(), ap_const_lv1_0))) {
        clockCounter_V_1_fu_80 = clockCounter_V_fu_107_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(tmp_fu_101_p2.read(), ap_const_lv1_1)))) {
        clockCounter_V_1_fu_80 = ap_const_lv10_0;
    }
}

void iosc_pulse::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void iosc_pulse::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void iosc_pulse::thread_clockCounter_V_fu_107_p2() {
    clockCounter_V_fu_107_p2 = (!clockCounter_V_1_fu_80.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(clockCounter_V_1_fu_80.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void iosc_pulse::thread_internalPulse() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        if (esl_seteq<1,1,1>(tmp_fu_101_p2.read(), ap_const_lv1_1)) {
            internalPulse =  (sc_logic) (ap_const_lv1_1[0]);
        } else if (esl_seteq<1,1,1>(tmp_fu_101_p2.read(), ap_const_lv1_0)) {
            internalPulse =  (sc_logic) (ap_const_lv1_0[0]);
        } else {
            internalPulse = sc_logic('X');
        }
    } else {
        internalPulse = sc_logic('X');
    }
}

void iosc_pulse::thread_internalPulse_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_fu_101_p2.read(), ap_const_lv1_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_fu_101_p2.read(), ap_const_lv1_1)))) {
        internalPulse_ap_vld = ap_const_logic_1;
    } else {
        internalPulse_ap_vld = ap_const_logic_0;
    }
}

void iosc_pulse::thread_tmp_fu_101_p2() {
    tmp_fu_101_p2 = (!clockCounter_V_1_fu_80.read().is_01() || !ap_const_lv10_3E8.is_01())? sc_lv<1>(): (sc_biguint<10>(clockCounter_V_1_fu_80.read()) > sc_biguint<10>(ap_const_lv10_3E8));
}

void iosc_pulse::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

