-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity eq is
generic (
    C_S_AXI_EQIO_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_EQIO_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_eqio_AWVALID : IN STD_LOGIC;
    s_axi_eqio_AWREADY : OUT STD_LOGIC;
    s_axi_eqio_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_EQIO_ADDR_WIDTH-1 downto 0);
    s_axi_eqio_WVALID : IN STD_LOGIC;
    s_axi_eqio_WREADY : OUT STD_LOGIC;
    s_axi_eqio_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_EQIO_DATA_WIDTH-1 downto 0);
    s_axi_eqio_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_EQIO_DATA_WIDTH/8-1 downto 0);
    s_axi_eqio_ARVALID : IN STD_LOGIC;
    s_axi_eqio_ARREADY : OUT STD_LOGIC;
    s_axi_eqio_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_EQIO_ADDR_WIDTH-1 downto 0);
    s_axi_eqio_RVALID : OUT STD_LOGIC;
    s_axi_eqio_RREADY : IN STD_LOGIC;
    s_axi_eqio_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_EQIO_DATA_WIDTH-1 downto 0);
    s_axi_eqio_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_eqio_BVALID : OUT STD_LOGIC;
    s_axi_eqio_BREADY : IN STD_LOGIC;
    s_axi_eqio_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of eq is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "eq,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=27,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=20,HLS_SYN_FF=2259,HLS_SYN_LUT=1271}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv16_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal b0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b1 : STD_LOGIC_VECTOR (31 downto 0);
    signal b2 : STD_LOGIC_VECTOR (31 downto 0);
    signal a1 : STD_LOGIC_VECTOR (31 downto 0);
    signal a2 : STD_LOGIC_VECTOR (31 downto 0);
    signal band : STD_LOGIC_VECTOR (15 downto 0);
    signal sampleIn : STD_LOGIC_VECTOR (15 downto 0);
    signal sampleOut_ap_vld : STD_LOGIC;
    signal coeff_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal coeff_ce0 : STD_LOGIC;
    signal coeff_we0 : STD_LOGIC;
    signal coeff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal coeff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal coeff_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal coeff_ce1 : STD_LOGIC;
    signal coeff_we1 : STD_LOGIC;
    signal coeff_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal coeff_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_fix_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal x1_fix_ce0 : STD_LOGIC;
    signal x1_fix_we0 : STD_LOGIC;
    signal x1_fix_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_fix_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal x2_fix_ce0 : STD_LOGIC;
    signal x2_fix_we0 : STD_LOGIC;
    signal x2_fix_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal y1_fix_ce0 : STD_LOGIC;
    signal y1_fix_we0 : STD_LOGIC;
    signal y1_fix_d0 : STD_LOGIC_VECTOR (16 downto 0);
    signal y1_fix_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal y2_fix_ce0 : STD_LOGIC;
    signal y2_fix_we0 : STD_LOGIC;
    signal y2_fix_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal a2_read_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal a1_read_reg_580 : STD_LOGIC_VECTOR (31 downto 0);
    signal b2_read_reg_585 : STD_LOGIC_VECTOR (31 downto 0);
    signal b1_read_reg_590 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_358_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_598 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_fu_375_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_reg_609 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x1_fix_addr_reg_629 : STD_LOGIC_VECTOR (2 downto 0);
    signal x2_fix_addr_reg_634 : STD_LOGIC_VECTOR (2 downto 0);
    signal y1_fix_addr_reg_639 : STD_LOGIC_VECTOR (2 downto 0);
    signal y2_fix_addr_reg_644 : STD_LOGIC_VECTOR (2 downto 0);
    signal coeff_load_1_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal coeff_load_2_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_fix_load_reg_674 : STD_LOGIC_VECTOR (15 downto 0);
    signal x2_fix_load_reg_679 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_5_fu_452_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_5_reg_684 : STD_LOGIC_VECTOR (5 downto 0);
    signal coeff_load_4_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_694 : STD_LOGIC_VECTOR (31 downto 0);
    signal y1_fix_load_reg_709 : STD_LOGIC_VECTOR (16 downto 0);
    signal y2_fix_load_reg_714 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_reg_719 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_reg_724 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_477_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_fu_495_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_6_reg_281 : STD_LOGIC_VECTOR (15 downto 0);
    signal i5_reg_293 : STD_LOGIC_VECTOR (5 downto 0);
    signal band_assign_reg_305 : STD_LOGIC_VECTOR (2 downto 0);
    signal sample_assign_reg_317 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_reg_328 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_1_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_cast_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_cast_fu_426_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_cast_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_3_fu_545_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_560_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_565_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_13_fu_352_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_386_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_390_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_401_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_420_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_431_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_491_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_530_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_2_fu_535_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_3_fu_550_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_4_fu_555_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component eq_mul_16s_32s_32_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component eq_mul_17s_32s_32_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component eq_coeff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component eq_x1_fix IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component eq_y1_fix IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (16 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component eq_eqio_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        b0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        b1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        b2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        a2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        band : OUT STD_LOGIC_VECTOR (15 downto 0);
        sampleIn : OUT STD_LOGIC_VECTOR (15 downto 0);
        sampleOut : IN STD_LOGIC_VECTOR (15 downto 0);
        sampleOut_ap_vld : IN STD_LOGIC );
    end component;



begin
    coeff_U : component eq_coeff
    generic map (
        DataWidth => 32,
        AddressRange => 35,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => coeff_address0,
        ce0 => coeff_ce0,
        we0 => coeff_we0,
        d0 => coeff_d0,
        q0 => coeff_q0,
        address1 => coeff_address1,
        ce1 => coeff_ce1,
        we1 => coeff_we1,
        d1 => coeff_d1,
        q1 => coeff_q1);

    x1_fix_U : component eq_x1_fix
    generic map (
        DataWidth => 16,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => x1_fix_address0,
        ce0 => x1_fix_ce0,
        we0 => x1_fix_we0,
        d0 => sample_assign_reg_317,
        q0 => x1_fix_q0);

    x2_fix_U : component eq_x1_fix
    generic map (
        DataWidth => 16,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => x2_fix_address0,
        ce0 => x2_fix_ce0,
        we0 => x2_fix_we0,
        d0 => x1_fix_q0,
        q0 => x2_fix_q0);

    y1_fix_U : component eq_y1_fix
    generic map (
        DataWidth => 17,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => y1_fix_addr_reg_639,
        ce0 => y1_fix_ce0,
        we0 => y1_fix_we0,
        d0 => y1_fix_d0,
        q0 => y1_fix_q0);

    y2_fix_U : component eq_y1_fix
    generic map (
        DataWidth => 17,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => y2_fix_addr_reg_644,
        ce0 => y2_fix_ce0,
        we0 => y2_fix_we0,
        d0 => y1_fix_q0,
        q0 => y2_fix_q0);

    eq_eqio_s_axi_U : component eq_eqio_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_EQIO_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_EQIO_DATA_WIDTH)
    port map (
        AWVALID => s_axi_eqio_AWVALID,
        AWREADY => s_axi_eqio_AWREADY,
        AWADDR => s_axi_eqio_AWADDR,
        WVALID => s_axi_eqio_WVALID,
        WREADY => s_axi_eqio_WREADY,
        WDATA => s_axi_eqio_WDATA,
        WSTRB => s_axi_eqio_WSTRB,
        ARVALID => s_axi_eqio_ARVALID,
        ARREADY => s_axi_eqio_ARREADY,
        ARADDR => s_axi_eqio_ARADDR,
        RVALID => s_axi_eqio_RVALID,
        RREADY => s_axi_eqio_RREADY,
        RDATA => s_axi_eqio_RDATA,
        RRESP => s_axi_eqio_RRESP,
        BVALID => s_axi_eqio_BVALID,
        BREADY => s_axi_eqio_BREADY,
        BRESP => s_axi_eqio_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        b0 => b0,
        b1 => b1,
        b2 => b2,
        a1 => a1,
        a2 => a2,
        band => band,
        sampleIn => sampleIn,
        sampleOut => tmp_12_reg_328,
        sampleOut_ap_vld => sampleOut_ap_vld);

    eq_mul_16s_32s_32_2_U0 : component eq_mul_16s_32s_32_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sample_assign_reg_317,
        din1 => reg_341,
        ce => ap_const_logic_1,
        dout => grp_fu_446_p2);

    eq_mul_16s_32s_32_2_U1 : component eq_mul_16s_32s_32_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x1_fix_load_reg_674,
        din1 => coeff_load_1_reg_649,
        ce => ap_const_logic_1,
        dout => grp_fu_461_p2);

    eq_mul_16s_32s_32_2_U2 : component eq_mul_16s_32s_32_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x2_fix_load_reg_679,
        din1 => coeff_load_2_reg_654,
        ce => ap_const_logic_1,
        dout => grp_fu_469_p2);

    eq_mul_17s_32s_32_2_U3 : component eq_mul_17s_32s_32_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 17,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => y1_fix_load_reg_709,
        din1 => reg_341,
        ce => ap_const_logic_1,
        dout => grp_fu_477_p2);

    eq_mul_17s_32s_32_2_U4 : component eq_mul_17s_32s_32_2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 17,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => y2_fix_load_reg_714,
        din1 => coeff_load_4_reg_689,
        ce => ap_const_logic_1,
        dout => grp_fu_486_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    band_assign_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_s_fu_346_p2 = ap_const_lv1_0))) then 
                band_assign_reg_305 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                band_assign_reg_305 <= b_reg_609;
            end if; 
        end if;
    end process;

    i5_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_s_fu_346_p2 = ap_const_lv1_0))) then 
                i5_reg_293 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i5_reg_293 <= i_5_reg_684;
            end if; 
        end if;
    end process;

    reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                reg_341 <= coeff_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reg_341 <= coeff_q0;
            end if; 
        end if;
    end process;

    sample_assign_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_s_fu_346_p2 = ap_const_lv1_0))) then 
                sample_assign_reg_317 <= sampleIn;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sample_assign_reg_317 <= out_fu_504_p2(30 downto 15);
            end if; 
        end if;
    end process;

    tmp_12_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond_fu_369_p2))) then 
                tmp_12_reg_328 <= tmp_6_reg_281;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                tmp_12_reg_328 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    tmp_6_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_s_fu_346_p2 = ap_const_lv1_0))) then 
                tmp_6_reg_281 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                tmp_6_reg_281 <= out_fu_504_p2(30 downto 15);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                a1_read_reg_580 <= a1;
                a2_read_reg_575 <= a2;
                b1_read_reg_590 <= b1;
                b2_read_reg_585 <= b2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                b_reg_609 <= b_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                coeff_load_1_reg_649 <= coeff_q0;
                coeff_load_2_reg_654 <= coeff_q1;
                i_5_reg_684 <= i_5_fu_452_p2;
                x1_fix_load_reg_674 <= x1_fix_q0;
                x2_fix_load_reg_679 <= x2_fix_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                coeff_load_4_reg_689 <= coeff_q0;
                tmp_i_reg_694 <= grp_fu_446_p2;
                y1_fix_load_reg_709 <= y1_fix_q0;
                y2_fix_load_reg_714 <= y2_fix_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_s_fu_346_p2 = ap_const_lv1_1))) then
                i_reg_598 <= i_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_2_i_reg_719 <= grp_fu_461_p2;
                tmp_3_i_reg_724 <= grp_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_4_i_reg_739 <= grp_fu_477_p2;
                tmp_5_i_reg_744 <= grp_fu_486_p2;
                tmp_7_i_reg_749 <= tmp_7_i_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                x1_fix_addr_reg_629 <= tmp_1_i_fu_412_p1(3 - 1 downto 0);
                x2_fix_addr_reg_634 <= tmp_1_i_fu_412_p1(3 - 1 downto 0);
                y1_fix_addr_reg_639 <= tmp_1_i_fu_412_p1(3 - 1 downto 0);
                y2_fix_addr_reg_644 <= tmp_1_i_fu_412_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_s_fu_346_p2, ap_CS_fsm_state2, exitcond_fu_369_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_s_fu_346_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_s_fu_346_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = exitcond_fu_369_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    b_fu_375_p2 <= std_logic_vector(unsigned(band_assign_reg_305) + unsigned(ap_const_lv3_1));

    coeff_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state10, tmp_1_fu_364_p1, tmp_7_fu_381_p1, tmp_8_cast_fu_396_p1, tmp_11_cast_fu_437_p1, ap_CS_fsm_state9, tmp_3_fu_545_p1, tmp_5_fu_565_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            coeff_address0 <= tmp_5_fu_565_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            coeff_address0 <= tmp_3_fu_545_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            coeff_address0 <= tmp_11_cast_fu_437_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            coeff_address0 <= tmp_8_cast_fu_396_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            coeff_address0 <= tmp_7_fu_381_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            coeff_address0 <= tmp_1_fu_364_p1(6 - 1 downto 0);
        else 
            coeff_address0 <= "XXXXXX";
        end if; 
    end process;


    coeff_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state10, tmp_9_cast_fu_407_p1, tmp_10_cast_fu_426_p1, tmp_2_fu_540_p1, ap_CS_fsm_state9, tmp_4_fu_560_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            coeff_address1 <= tmp_4_fu_560_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            coeff_address1 <= tmp_2_fu_540_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            coeff_address1 <= tmp_10_cast_fu_426_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            coeff_address1 <= tmp_9_cast_fu_407_p1(6 - 1 downto 0);
        else 
            coeff_address1 <= "XXXXXX";
        end if; 
    end process;


    coeff_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            coeff_ce0 <= ap_const_logic_1;
        else 
            coeff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    coeff_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            coeff_ce1 <= ap_const_logic_1;
        else 
            coeff_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    coeff_d0_assign_proc : process(ap_CS_fsm_state1, b0, a2_read_reg_575, b2_read_reg_585, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            coeff_d0 <= a2_read_reg_575;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            coeff_d0 <= b2_read_reg_585;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            coeff_d0 <= b0;
        else 
            coeff_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    coeff_d1_assign_proc : process(a1_read_reg_580, b1_read_reg_590, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            coeff_d1 <= a1_read_reg_580;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            coeff_d1 <= b1_read_reg_590;
        else 
            coeff_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    coeff_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_s_fu_346_p2, ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_s_fu_346_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            coeff_we0 <= ap_const_logic_1;
        else 
            coeff_we0 <= ap_const_logic_0;
        end if; 
    end process;


    coeff_we1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            coeff_we1 <= ap_const_logic_1;
        else 
            coeff_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_369_p2 <= "1" when (band_assign_reg_305 = ap_const_lv3_7) else "0";
    i_1_fu_530_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(i_reg_598));
    i_2_fu_535_p2 <= std_logic_vector(unsigned(ap_const_lv16_2) + unsigned(i_reg_598));
    i_3_fu_550_p2 <= std_logic_vector(unsigned(ap_const_lv16_3) + unsigned(i_reg_598));
    i_4_fu_555_p2 <= std_logic_vector(unsigned(ap_const_lv16_4) + unsigned(i_reg_598));
    i_5_fu_452_p2 <= std_logic_vector(unsigned(ap_const_lv6_5) + unsigned(i5_reg_293));
    i_fu_358_p2 <= std_logic_vector(unsigned(band) + unsigned(tmp_13_fu_352_p2));
    out_fu_504_p2 <= std_logic_vector(unsigned(tmp_8_i_fu_500_p2) - unsigned(tmp_5_i_reg_744));

    sampleOut_ap_vld_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sampleOut_ap_vld <= ap_const_logic_1;
        else 
            sampleOut_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_420_p2),32));
    tmp_10_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv6_3) + unsigned(i5_reg_293));
    tmp_11_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_431_p2),32));
    tmp_11_fu_431_p2 <= std_logic_vector(unsigned(ap_const_lv6_4) + unsigned(i5_reg_293));
    tmp_13_fu_352_p2 <= std_logic_vector(shift_left(unsigned(band),to_integer(unsigned('0' & ap_const_lv16_2(16-1 downto 0)))));
    tmp_14_fu_386_p1 <= i5_reg_293(5 - 1 downto 0);
        tmp_1_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_fu_358_p2),32));

    tmp_1_i_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(band_assign_reg_305),32));
        tmp_2_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_1_fu_530_p2),32));

        tmp_3_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_2_fu_535_p2),32));

        tmp_4_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_3_fu_550_p2),32));

        tmp_5_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_4_fu_555_p2),32));

    tmp_7_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_reg_293),32));
    tmp_7_i_fu_495_p2 <= std_logic_vector(unsigned(tmp_2_i_reg_719) + unsigned(tmp_fu_491_p2));
    tmp_8_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_390_p2),32));
    tmp_8_fu_390_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(tmp_14_fu_386_p1));
    tmp_8_i_fu_500_p2 <= std_logic_vector(unsigned(tmp_7_i_reg_749) - unsigned(tmp_4_i_reg_739));
    tmp_9_cast_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_401_p2),32));
    tmp_9_fu_401_p2 <= std_logic_vector(unsigned(ap_const_lv6_2) + unsigned(i5_reg_293));
    tmp_fu_491_p2 <= std_logic_vector(unsigned(tmp_3_i_reg_724) + unsigned(tmp_i_reg_694));
    tmp_s_fu_346_p2 <= "1" when (signed(band) < signed(ap_const_lv16_7)) else "0";

    x1_fix_address0_assign_proc : process(ap_CS_fsm_state3, x1_fix_addr_reg_629, ap_CS_fsm_state4, tmp_1_i_fu_412_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x1_fix_address0 <= x1_fix_addr_reg_629;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x1_fix_address0 <= tmp_1_i_fu_412_p1(3 - 1 downto 0);
        else 
            x1_fix_address0 <= "XXX";
        end if; 
    end process;


    x1_fix_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x1_fix_ce0 <= ap_const_logic_1;
        else 
            x1_fix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x1_fix_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x1_fix_we0 <= ap_const_logic_1;
        else 
            x1_fix_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_fix_address0_assign_proc : process(ap_CS_fsm_state3, x2_fix_addr_reg_634, ap_CS_fsm_state4, tmp_1_i_fu_412_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x2_fix_address0 <= x2_fix_addr_reg_634;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x2_fix_address0 <= tmp_1_i_fu_412_p1(3 - 1 downto 0);
        else 
            x2_fix_address0 <= "XXX";
        end if; 
    end process;


    x2_fix_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            x2_fix_ce0 <= ap_const_logic_1;
        else 
            x2_fix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x2_fix_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x2_fix_we0 <= ap_const_logic_1;
        else 
            x2_fix_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y1_fix_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            y1_fix_ce0 <= ap_const_logic_1;
        else 
            y1_fix_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    y1_fix_d0 <= out_fu_504_p2(31 downto 15);

    y1_fix_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            y1_fix_we0 <= ap_const_logic_1;
        else 
            y1_fix_we0 <= ap_const_logic_0;
        end if; 
    end process;


    y2_fix_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            y2_fix_ce0 <= ap_const_logic_1;
        else 
            y2_fix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    y2_fix_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            y2_fix_we0 <= ap_const_logic_1;
        else 
            y2_fix_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
